{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/ToDo/ToDoActions/ToDoActionsRouter.tsx","Components/ToDo/TimeScale/TaskItem/TaskItem.tsx","Components/ToDo/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/ToDo/TimeScale/TimeScale.tsx","Components/ToDo/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TaskListActions/TaskListActions.ts","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","redux/usersSelector.ts","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserMobile.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","undefined","setFieldValue","target","checked","Array","isArray","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","onOkCheck","mode","autoHeight","onPickerChangeCheck","disabled","defaultChecked","locale","enUs","className","cols","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","settings","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","enableReinitialize","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","isReadOnly","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialStatus","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","resetForm","open","TaskItemMobile","wrap","element","textDecoration","toString","backgroundColor","autoClose","right","text","onPress","left","splitDate","setFullYear","parseInt","setMonth","setDate","onEdit","onOpen","onClose","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","filter","getHours","headlineDate","index","orientation","TasksOnly","ToDoActionsRouter","CallAction","isCallVisible","setIsCallVisible","action_data","phone","console","log","PhoneOutlined","centered","href","CallResultForm","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","as","join","placement","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","zeroTime","ToDoBrowser","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","formProps","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","isUsersDataChanged","setUsersList","updateUserList","changedUserData","setUsersDataChanged","getUsersList","UsersList","usersReducer","statetCopy","newUserList","rootReducer","combineReducers","app","users","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","LoginForm","Login","email","password","block","Orders","NewProjectForm","frontend","setFrontend","backend","setBackend","submitFrontEnd","val","submitBackEnd","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","dataSource","childsTasklList","renderItem","CollapseItem","getChildsList","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","checkActionsType","formPropsData","lead_name","phone_number","getInitialValues","getSelectOptions","taskTreeTypes","TasksTreeBrowser","runTaskVisible","setRunTaskVisible","runData","setRunData","newTaskList","okText","cancelText","newToDo","description","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","initialTimeToComplete","TasksTreeMobile","onAdd","taskName","onOpenChange","parentId","isSubform","childTypes","RegisterForm","statusOptions","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UserStatus","UsersMobile","getUsersListSelector","createSelector","UserDataForm","userData","created_at","updated_at","updateUser","FormFielsd","isChanged","setIsChanged","submitPosible","getTargetUser","toDoPart","toDoList","currentPage","defaultPageSize","startIndex","endIndex","CurrentUser","setDefaultPageSize","setCurrentPage","toDoFormVisible","setToDoFormVisible","match","params","setDateInterval","total","showTotal","range","defaultCurrent","onShowSizeChange","current","tasklist","toDo","isBetween","TodoItem","timeParts","CurrentUserMobile","getTaskListCallback","useCallback","onTaskOpen","enUS","Math","ceil","authActions","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","render","Page404","MainApp","search","substr","pair","subTitle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e7e73865.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = (): string => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n    return instance.defaults.headers.common['X-Auth-Token']\r\n}","export const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n\r\n        if (props.onChange) {\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n    \r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    {...props}\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype SelectOptionsType = {\r\n    name: string,\r\n    value: string\r\n}\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<SelectOptionsType>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void,\r\n    disabled?: boolean,\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value, props.type])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: SelectOptionsType) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n    const onPickerChangeCheck = props.type === 'date' || 'time' ? onPickerChange : null\r\n    const disabled = props.disabled ? {disabled: true} : null\r\n\r\n    let onOkCheck\r\n    if (props.AntComponent.onOk) {\r\n        onOkCheck = onOk\r\n    }\r\n\r\n    if (props.disabled) {\r\n\r\n    }   \r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n                {...disabled}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                {...onOkCheck}\r\n                {...onPickerChangeCheck}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const settings = props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {SettingsForm}\r\n            </Formik>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n    toDoList?: Array<any> \r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n        props.setIsInterval(e.target.checked, props.dateInterval)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            { !props.isReadOnly ?\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n            { !props.isReadOnly ?\r\n            <div className=\"mt-3\">\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={ props.showModal ? props.showModal : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n            </div>\r\n            : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer?: () => void,\r\n    showModal?: () => void,\r\n    isOpen?: boolean,\r\n    isReadOnly?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => void\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const disabled = props.initialStatus === 'readOnly' ? true : false\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            { !disabled ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval, props.getTaskList])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n            setDrawerData(initialDrewerData)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formPropsCopy: NewTaskDataType = {\r\n            ...values,\r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    enableReinitialize={true}\r\n                                >\r\n                                    {ToDoForm}\r\n                                </Formik>\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n    isReadOnly: boolean\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1]) - 1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    if (!props.isReadOnly) {\r\n        return (\r\n            <SwipeAction\r\n                key={props.element.id}\r\n                style={{ backgroundColor: 'gray' }}\r\n                autoClose\r\n                right={[\r\n                    {\r\n                        text: 'Delete',\r\n                        onPress: () => props.deleteTask(\r\n                            props.element.id,\r\n                            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                            props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                        ),\r\n                        style: { backgroundColor: '#F4333C', color: 'white' },\r\n                    },\r\n                ]}\r\n                left={[\r\n                    {\r\n                        text: 'Edit',\r\n                        onPress: () => { onEdit(props.element) },\r\n                        style: { backgroundColor: '#108ee9', color: 'white' },\r\n                    },\r\n                    {\r\n                        text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                        onPress: () => props.onComplete(props.element),\r\n                        style: { backgroundColor: 'green', color: 'white' },\r\n                    },\r\n                ]}\r\n                onOpen={() => { }}\r\n                onClose={() => { }}\r\n            >\r\n\r\n                <List.Item\r\n                    key={props.element.id.toString()}\r\n                    wrap\r\n                >\r\n                    <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                        <div className=\"col-2 \">\r\n                            <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            {props.element.isCompleted ?\r\n                                <span\r\n                                    className=\"text-break ml-3\"\r\n                                    style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                                >\r\n                                    {props.element.name}\r\n                                </span>\r\n                                :\r\n                                <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </List.Item>\r\n            </SwipeAction>\r\n        )\r\n    } else {\r\n        return (\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span\r\n                                className=\"text-break ml-3\"\r\n                                style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                            >\r\n                                {props.element.name}\r\n                            </span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        )\r\n    }\r\n\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask?: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData?: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues?: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer?: () => void,\r\n    onComplete?: (values: TaskType) => void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList\r\n                .filter((item: TaskType) => {\r\n                    return item.date === date && moment().hours(hour).format('HH') === item.time.split(':')[0]\r\n                })\r\n                .map((item: TaskType) => {\r\n                    return (\r\n                        <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                            setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                            setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                            showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                            onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                            isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                        />\r\n                    )\r\n                })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <div key={index + 'div'}>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </div>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <div key={date.format('DD MMMM') + 'divBlock'}>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <div key={date.format('DD MMMM')}>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map((task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                                    setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                                    showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                                    setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                                    onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                                    isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import { Button, Modal } from 'antd'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { PhoneOutlined } from '@ant-design/icons'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport { AntTextArea } from '../../../utils/Formik/CreateAntField'\r\n\r\nconst ToDoActionsRouter: React.FC<any> = (props) => {\r\n\r\n    switch (props.action) {\r\n        case 2:\r\n\r\n            return <CallAction {...props} />\r\n\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default ToDoActionsRouter\r\n\r\nconst CallAction: React.FC<any> = (props) => {\r\n    const [isCallVisible, setIsCallVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n\r\n    }\r\n\r\n    const data = JSON.parse(props.action_data)\r\n    let phone = 'tel:'\r\n\r\n    console.log(data)\r\n    if (data) {\r\n        phone = phone + data.phone\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { setIsCallVisible(true) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PhoneOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            ></Button>\r\n\r\n            <Modal\r\n                title={\"Call to \" + data.name}\r\n                visible={isCallVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                width={1000}\r\n                centered\r\n            >\r\n                {data ?\r\n                    <>\r\n                        <p><a href={phone}>Call to: {data.name}</a></p>\r\n                        <p>number: {data.phone}</p>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Formik\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {CallResultForm}\r\n                </Formik>\r\n\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst CallResultForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-4\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            Call result:\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n                <button className=\"ant-btn ant-btn-primary ml-4\" type=\"submit\">\r\n                    Save and complete\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\nimport ToDoActionsRouter from '../../ToDoActions/ToDoActionsRouter'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        console.log(props.isReadOnly)\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const disabled = props.isReadOnly ? {disabled: true} : null\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        {...disabled}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                { !props.isReadOnly ? \r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <ToDoActionsRouter {...props.element}/>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    ></Button>\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n                : null }\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\n// import { TaskType } from '../../Types/types'\r\nimport { TaskType } from './../../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                getTaskList()(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval, props.getTaskList, selestedDates])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit, props.isReadOnly ? props.isReadOnly : false)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (\r\n    taskList: Array<TaskType>, \r\n    isInterval:boolean, \r\n    onEdit:(value:any)=>void,\r\n    isReadOnly: boolean\r\n    ):Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType):string => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key={'noTasks'+index}>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\" key={index}>\r\n                                    <TaskItem key={index} element={element} onEdit={onEdit} isReadOnly={isReadOnly}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit , isReadOnly))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList === null) {\r\n            getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList, props.getTaskList, props.dateInterval])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n\r\n        actions.resetForm()\r\n        \r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ToDoForm}\r\n                </Formik>\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        console.log(values)\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.getTaskList()\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        return instance.get<UsersListType>(`account`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        return instance.put<UserType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI, } from '../api/usersAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\nimport { actions as authActions } from './authReducer'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n    isUsersDataChanged: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    usersList: [],\r\n    isUsersDataChanged: false\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_IS_USERS_DATA_CHANGED':\r\n            return { ...state, isUsersDataChanged: action.isUsersDataChanged }\r\n\r\n        case 'SN/USERS/UPDATE_USERS_LIST':\r\n            let statetCopy = { ...state }\r\n            const newUserList = statetCopy.usersList.map((item: UserType) => {\r\n                if (item.id !== action.changedUserData.id) {\r\n                    return item\r\n                } else {\r\n                    return action.changedUserData\r\n                }\r\n            })\r\n            return { ...state, usersList: newUserList }\r\n\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return { ...state, usersList: action.usersList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n    updateUserList: (changedUserData: UserType) => ({ type: 'SN/USERS/UPDATE_USERS_LIST', changedUserData } as const),\r\n    setUsersDataChanged: (isUsersDataChanged: boolean) => ({ type: 'SN/USERS/SET_IS_USERS_DATA_CHANGED', isUsersDataChanged } as const),\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await usersAPI.getUsersList()\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        dispatch(actions.updateUserList(response.data.changedUserData))\r\n        dispatch( actions.setUsersDataChanged(true) )\r\n        const state = getState()\r\n        if (state.auth.user && state.auth.user.id === response.data.changedUserData.id) {\r\n            const data: UserType = response.data.changedUserData\r\n            // @ts-ignore\r\n            dispatch(authActions.setAuthUserData(data, null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n\r\n        switch (opt.props.children) {\r\n            case 'Logout':\r\n                props.onLogout()\r\n                break\r\n        \r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory()\r\n    const location = useLocation()\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            const disabled = item.disabled ? {disabled: true} : null\r\n            return (\r\n                <Menu.Item key={item.value} {...disabled}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"info\" onClick={()=>{}}>\r\n                            Info\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"help\" onClick={()=>{}}>\r\n                            Help\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            },\r\n            {\r\n                label: 'Daily schedule',\r\n                value: appLocation + 'schedule',\r\n                disabled: false,\r\n            },\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {LoginForm}\r\n            </Formik>\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\n\r\nconst NewProjectForm: React.FC<any> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                onSelect={submitBackEnd}\r\n            />\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isCRA\"\r\n                    label=\"Choise Backend Type\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                </>\r\n            :null}\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                onOk={ (val:any)=>{\r\n                    // console.log('111', val)\r\n                }}\r\n            />\r\n            {isNewType === 1 ? <div>old</div> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {}\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined, DeleteOutlined, EditOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { TaskTreeBrowserItemType } from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log(taskId)\r\n        props.setInitialFormValues({ ...props.initialValues, parent_id: taskId })\r\n        props.setDrawerData({header: 'add subtask', taskId: false})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        console.log(values)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n        console.log(newFormValues)\r\n        props.setInitialFormValues(newFormValues)\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id === null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    return (\r\n        <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={props.childsTasklList}\r\n            renderItem={item => {\r\n                return (<CollapseItem\r\n                    item={item}\r\n                    taskList={props.taskList}\r\n                    key={item.id.toString()}\r\n                    onAddSubtask={props.onAddSubtask}\r\n                    onEdit={props.onEdit}\r\n                    deleteTask={props.deleteTask}\r\n                    onStatusChange={props.onStatusChange}\r\n                    onRunTask={props.onRunTask}\r\n                />\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: string\r\n    item: TaskListType,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const isLast = getChildsList(props.taskList, props.item).length === 0 ? true : false\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"p-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props} />}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem\r\n            item={props.item}\r\n            onEdit={props.onEdit}\r\n            deleteTask={props.deleteTask}\r\n            onAddSubtask={props.onAddSubtask}\r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<any>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n            <>\r\n                <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id.toString()} onClick={props.onStatusChange} /></div>\r\n                <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                    <div className=\"ml-3 float-left\">\r\n\r\n                        {\r\n                            props.item.isCompleted ?\r\n                                <span className=\"text-black-50\">{props.item.name}</span>\r\n                                :\r\n                                <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"ml-3 float-right\">\r\n                        {props.item.time_to_complete}\r\n                    </div>\r\n                </div>\r\n                <div className=\"pr-3\">\r\n                    <ButtonsBlock {...props} />\r\n                </div>\r\n            </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (parentId: number) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return (\r\n        <div className=\"d-flex flex-row\">\r\n            {Number(props.item.task_type) > 1 ?\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onRunTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                :\r\n                null\r\n            }\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onEdit(props.item) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.deleteTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: Array<TaskListType>, item: TaskListType) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","export type FormPropsDataType = {\r\n    task_type: number\r\n    lead_name?: string,\r\n    phone_number?: string\r\n}\r\nexport const checkActionsType = (formPropsData: FormPropsDataType):any => {\r\n    switch ( Number(formPropsData.task_type) ) {\r\n        case 2:\r\n            return {\r\n                lead_name: formPropsData.lead_name,\r\n                phone_number: formPropsData.phone_number\r\n            }\r\n    \r\n        default:\r\n            return null\r\n    }\r\n}","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId,\r\n                action: Number(runData.task_type),\r\n                action_data: {\r\n                    phone: data.phone_number,\r\n                    name: data.lead_name\r\n                }\r\n            }\r\n            console.log(newToDo)\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const data = checkActionsType(formProps)\r\n\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {NewTaskTreeForm}\r\n                        </Formik>\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment(),\r\n                                action: 2\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {RunTaskFormCall}\r\n                        </Formik>\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeMobile'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: InitialDrewerDataType) => void,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: (initialFormValues: InitialValuesType) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            // task_type: 0\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions ? task.descriptions : undefined,\r\n            parent_id: task.parent_id ? task.parent_id : undefined,\r\n            // task_type:  Number(task.task_type) \r\n            task_type:  [Number(task.task_type)]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name,\r\n            taskId: props.taskItem.id\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n            <Item\r\n                onClick={onItemOpen}\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: Array<number>,\r\n    name?: string,\r\n    descriptions?: string\r\n    parent_id?: number\r\n    time_to_complete?: Date\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: [1],\r\n            time_to_complete: initialTimeToComplete,\r\n        }\r\n    )\r\n}\r\n\r\nlet initialTimeToComplete = NewTimeByString()\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        } else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues( getInitialValues(props.taskList) )\r\n    }, [ props.taskList, props.getTaskList, props.isTaskListLoaded ])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const data = checkActionsType({...formProps, task_type: formProps.task_type[0]})\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...getInitialValues(props.taskList), parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...getInitialValues(props.taskList), parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        if (props.selectedTasks.length > 1) {\r\n            const taskId = props.selectedTasks[props.selectedTasks.length-2]\r\n            const taskName = props.taskList.filter( item => item.id === taskId)[0].name\r\n            setDrawerData({ header: taskName, taskId: taskId })\r\n        } else {\r\n            setDrawerData({ header: 'Task Tree', taskId: false })\r\n        }\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={\r\n                        drawerData.header === 'Tasks Tree' ?\r\n                        <h5 className=\"w-100 text-center\">{drawerData.header}</h5>\r\n                        :\r\n                        <h5>{drawerData.header}</h5>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {NewTaskTreeForm}\r\n                            </Formik>\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList\r\n                            .map((item: TaskListType) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Проект',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword, AntSelect } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"User Status\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n\r\ntype StatusOptionItemType = {\r\n    name: string,\r\n    value: string,\r\n    isSubform: boolean,\r\n}\r\n\r\ntype StatusOptionsType = Array<StatusOptionItemType>\r\n\r\nconst statusOptions: StatusOptionsType = [\r\n    {\r\n        name: 'Guest',\r\n        value: 'guest',\r\n        isSubform: false,\r\n    },\r\n    {\r\n        name: 'Admin',\r\n        value: 'admin',\r\n        isSubform: false,\r\n    },\r\n]","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register(formProps)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {RegisterForm}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                {props.UserStatus === 'superAdmin' ?\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{\r\n                                        // console.log('onClick')\r\n                                    }}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, { useEffect } from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { List } from 'antd-mobile'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\n\r\nconst Item = List.Item\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n    \r\n    let { url } = useRouteMatch();\r\n    return (\r\n        <div>\r\n            <List renderHeader={() => 'Users:'} className=\"my-list\">\r\n                {   props.usersList.map( (item: any) => {\r\n                        return(\r\n                            <Item \r\n                                key={item.id.toString()}\r\n                                onClick={() => {console.log('onClick')}}\r\n                            >\r\n                                <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                            </Item>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './store'\r\n\r\nconst UsersItemsSelector = (state: AppStateType) => state.users.usersList\r\n\r\nexport const getUsersListSelector = createSelector(UsersItemsSelector,\r\n    (users) => {\r\n        return users\r\n    }\r\n)","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\nimport {getUsersListSelector} from './../../redux/usersSelector'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: getUsersListSelector(state),\r\n        UserStatus: state.auth.user?.status\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FormFielsd}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n        {\r\n            name: 'Super Admin',\r\n            value: 'superAdmin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary mb-4\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../../Types/types'\r\nimport TimeScale from './../../ToDo/TimeScale/TimeScale'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeader'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues, InitialValuesType } from './../../ToDo/ToDoBrowser'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { UserType } from '../../../redux/authReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetUser = (usersList: Array<UserType> ,userId: string):UserType  => {\r\n    return usersList.filter((item: UserType) => item.id.toString() === userId )[0]\r\n}\r\n\r\nexport const toDoPart = (\r\n    toDoList: Array<TaskType>,\r\n    currentPage: number,\r\n    defaultPageSize: number\r\n    ): Array<TaskType> => {\r\n    let toDoPart: Array<TaskType> = []\r\n    if (toDoList) {\r\n        const startIndex = (currentPage - 1) * defaultPageSize\r\n        const endIndex = startIndex + defaultPageSize\r\n        for (let index = 0; index < toDoList.length; index++) {\r\n            const element = toDoList[index];\r\n            if (index >= startIndex && index < endIndex) {\r\n                toDoPart.push(element)\r\n            }\r\n\r\n        }\r\n    }\r\n    return toDoPart\r\n}\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n    }, [props.usersList, props.getUsersList, props.isUsersDataChanged, props.setUsersDataChanged])\r\n\r\n    const [defaultPageSize, setDefaultPageSize] = useState(10)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    \r\n\r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onShowSizeChange = (current: number, size: number) => {\r\n        setDefaultPageSize(size)\r\n    }\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n\r\n    \r\n\r\n    const getTaskList = (startDate: string, endDate: string) => {\r\n        let tasklist: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const toDo = user.toDoList[index];\r\n                if (moment(toDo.date).isBetween(\r\n                    moment(dateInterval.startDate.format('YYYY-MM-DD')).add(-1, 'day'),\r\n                    moment(dateInterval.endDate.format('YYYY-MM-DD')).add(1, 'day'),\r\n                    'day')) {\r\n                    tasklist.push(toDo)\r\n                }\r\n            }\r\n        }\r\n        setTaskList(tasklist)\r\n    }\r\n\r\n    const setIsIntervalValues = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        console.log('setIsIntervalValues', isInterval)\r\n        setIsInterval(isInterval)\r\n        setDateInterval(date)\r\n    }\r\n\r\n    const onToDoFormClose = () => {\r\n        setInitialFormValues(initialValues)\r\n        setToDoFormVisible(false)\r\n    }\r\n\r\n    const handleSubmitToDoForm = () => {\r\n    }\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, defaultPageSize).map((item: TaskType) => {\r\n                                return <TodoItem \r\n                                    key={item.id.toString()} \r\n                                    item={item} \r\n                                    setToDoFormVisible={setToDoFormVisible}\r\n                                    setInitialFormValues={setInitialFormValues}\r\n                                    />\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n                        <Pagination\r\n                            total={user.toDoList?.length}\r\n                            showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                            defaultPageSize={10}\r\n                            defaultCurrent={1}\r\n                            onChange={onPagination}\r\n                            onShowSizeChange={onShowSizeChange}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsIntervalValues}\r\n                            isReadOnly={true}\r\n                        />\r\n                            <TimeScale\r\n                                onEdit={onTaskEdit}\r\n                                dateInterval={dateInterval}\r\n                                errorMessage={props.errorMessage}\r\n                                getTaskList={getTaskList}\r\n                                isInterval={isInterval}\r\n                                settings={props.settings}\r\n                                taskList={taskList}\r\n                                taskListIsFetching={false}\r\n                                taskSaveStatus={props.taskSaveStatus}\r\n                                isReadOnly={true}\r\n                            />            \r\n                    </Panel>\r\n                    <Panel header=\"Related users\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n                <Drawer\r\n                    title={initialFormValues.name}\r\n                    placement=\"right\"\r\n                    closable={true}\r\n                    onClose={onToDoFormClose}\r\n                    visible={toDoFormVisible}\r\n                    width=\"90%\"\r\n                >\r\n                    <Formik\r\n                        initialValues={initialFormValues}\r\n                        onSubmit={handleSubmitToDoForm}\r\n                        enableReinitialize={true}\r\n                        initialStatus={'readOnly'}\r\n                    >\r\n                        {ToDoForm}\r\n                    </Formik>\r\n                </Drawer>\r\n\r\n            </div >\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default CurrentUser\r\n\r\ntype TodoItemPropsType = {\r\n    item: TaskType,\r\n    key: string,\r\n    setToDoFormVisible:  React.Dispatch<React.SetStateAction<boolean>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>\r\n}\r\nconst TodoItem: React.FC<TodoItemPropsType> = (props) => {\r\n    const showDrawer = (item: TaskType) => {\r\n        props.setToDoFormVisible(true)\r\n        const timeParts = item.time.split(':')\r\n        props.setInitialFormValues({\r\n            name: item.name,\r\n            time: moment().hours(Number(timeParts[0])).minutes(Number(timeParts[1])).seconds(Number(timeParts[2])),\r\n            date: moment(item.date),\r\n            descriptions: item.descriptions ? item.descriptions : null\r\n        })\r\n    }\r\n    return (\r\n        <List.Item\r\n            key={props.item.id}\r\n            actions={[<Button onClick={() => { showDrawer(props.item) }} type=\"link\" block>Show</Button>]}\r\n        >\r\n            {props.item.name}\r\n        </List.Item>\r\n    )\r\n}","import { Spin } from 'antd'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { getTargetUser, toDoPart } from './CurrentUser'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport { Accordion, LocaleProvider, Pagination, List, NavBar, Icon, Drawer, Button } from 'antd-mobile'\r\nimport UserDataForm from './UserDataForm'\r\nimport enUS from 'antd-mobile/lib/locale-provider/en_US'\r\nimport './Pagination.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ToDoHeaderMobile from '../../ToDo/ToDoHeader/ToDoHeaderMobile'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues } from '../../ToDo/ToDoMobile'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\nimport {TasksOnly} from './../../ToDo/ToDoMobile'\r\nimport { TaskType } from '../../../Types/types'\r\n\r\nconst Item = List.Item\r\n\r\nconst CurrentUserMobile: React.FC<CurrentUserPropsType> = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n    \r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const getTaskListCallback = useCallback(\r\n        (startDate: string, endDate: string) => {\r\n            if (user) {\r\n                let taskList: Array<TaskType> = []\r\n                if (user.toDoList) {\r\n                    for (let index = 0; index < user.toDoList.length; index++) {\r\n                        const toDo = user.toDoList[index];\r\n                        if (moment(toDo.date).isBetween(\r\n                            moment(startDate).add(-1, 'day'),\r\n                            moment(endDate).add(1, 'day'),\r\n                            'day')) {\r\n                                taskList.push(toDo)\r\n                        }\r\n                    }\r\n                }\r\n                setTaskList(taskList)\r\n            } else {\r\n                setTaskList(null)\r\n            }\r\n        },\r\n        [setTaskList, user],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        console.log(props.isUsersDataChanged)\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n        if (user && taskList === null) {\r\n            getTaskListCallback(dateInterval.startDate.format('YYYY-MM-DD'), dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n        \r\n    }, [props.usersList, props.getUsersList, dateInterval, user, taskList, getTaskListCallback, props.isUsersDataChanged, props.setUsersDataChanged])\r\n    \r\n    let history = useHistory()\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n        getTaskListCallback(date.startDate.format('YYYY-MM-DD'), date.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onTaskOpen = (task: TaskType) => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n        let time = NewTimeByString(task.time)\r\n\r\n        const splitDate = task.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1])-1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        setInitialFormValues({\r\n            name: task.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: task.descriptions ? task.descriptions : null\r\n        })\r\n    }\r\n\r\n    const onTaskClose = () => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        \r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    mode=\"light\"\r\n                    icon={<Icon type=\"left\" />}\r\n                    onLeftClick={() => history.replace(props.appLocation+'users')}\r\n                    rightContent={[\r\n                       <span key=\"UserId\" >User id: {props.match.params.userId}</span>\r\n                    ]}\r\n                >\r\n                    <span className=\"text-dark\">{user.name}</span>\r\n                </NavBar>\r\n\r\n                <Accordion defaultActiveKey=\"\" className=\"my-accordion\" onChange={onChange} >\r\n                    <Accordion.Panel header=\"User data\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"ToDo List\">\r\n                    <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <>\r\n                        <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"ml-3 mt-3 mb-5\"\r\n                                onClick={onTaskClose}\r\n                                type=\"primary\"\r\n                            >\r\n                                Close\r\n                            </Button>\r\n\r\n                        <div className=\"mt-1\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                                initialStatus={'readOnly'}\r\n                            >\r\n                                {ToDoForm}\r\n                            </Formik>\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    open={toDoFormVisible}\r\n                >\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, 10).map((item: TaskType) => {\r\n                                return (\r\n                                <Item \r\n                                    key={item.id.toString()} \r\n                                    onClick={()=>{onTaskOpen(item)}}\r\n                                >\r\n                                    {item.name}\r\n                                </Item>\r\n                                )\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n\r\n                        <LocaleProvider locale={enUS}>\r\n                            <div className=\"pagination-container\" >\r\n                                <Pagination\r\n                                    className=\"m-2\"\r\n                                    total={user.toDoList ? Math.ceil(user.toDoList?.length / 10) : 0}\r\n                                    current={currentPage}\r\n                                    onChange={onPagination}\r\n                                />\r\n                            </div>\r\n                        </LocaleProvider>\r\n                        </Drawer>\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Schedule\">\r\n                        <ToDoHeaderMobile\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            isReadOnly={true}\r\n                        />\r\n                        <TasksOnly \r\n                            dateInterval={dateInterval}\r\n                            taskList={taskList}\r\n                            isReadOnly={true}\r\n                        />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Related users\"></Accordion.Panel>\r\n                    <Accordion.Panel header=\"Permissions\"></Accordion.Panel>\r\n                </Accordion>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"small\" />\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentUserMobile","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../redux/authReducer'\r\nimport CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        settings:state.auth.viewSettings,\r\n        appLocation: state.app.location,\r\n        viewSettings: state.auth.viewSettings,\r\n        isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser, setUsersDataChanged: actions.setUsersDataChanged}) \r\n    (isMobile ? CurrentUserMobile : CurrentUser)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin, Result, Button } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void,\r\n    addLocation: (location: string) => void,\r\n    login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n    const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n    useEffect(() => {\r\n        if (!props.initialized) {\r\n            let instanseCreds = parseQueryString()\r\n            if (instanseCreds.email && instanseCreds.password) {\r\n                instanseCreds.remember = true\r\n                props.login(instanseCreds)\r\n            }\r\n\r\n            if (location === '/front1/') {\r\n                props.addLocation(location)\r\n                setLocation(location)\r\n            }\r\n            props.initializeApp()\r\n        }\r\n    }, [props, location])\r\n\r\n\r\n    if (!props.initialized) {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n    console.log(props.appLocation)\r\n\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <Switch>\r\n                {!props.isAuth ?\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n                    :\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n                }\r\n\r\n                {props.isAuth ?\r\n                    <Route exact path={props.appLocation + 'login'}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Route path={props.appLocation + 'login'}\r\n                    render={() => <Login />} />\r\n\r\n                <Route path={props.appLocation + 'toDoList'}\r\n                    render={() => <ToDoList />} />\r\n\r\n                <Route path={props.appLocation + 'tasksTree'}\r\n                    render={() => <TasksTree />} />\r\n\r\n                <Route path={props.appLocation + 'orders'}\r\n                    render={() => <Orders />} />\r\n\r\n                <Route path={props.appLocation + 'register'}\r\n                    render={() => <Register />} />\r\n\r\n                <Route path={props.appLocation + 'users/:userId'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? CurrentUser : Page404} />\r\n\r\n                <Route exact path={props.appLocation + 'users'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? Users : Page404} />\r\n\r\n                <Route path={props.appLocation + '*'} component={Page404} />\r\n\r\n            </Switch>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized,\r\n    appLocation: state.app.location,\r\n    isAuth: state.auth.isAuth,\r\n    userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <div className={isMobile ? \"\" : \"container\"}>\r\n                    <AppContainer />\r\n                </div>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n    const params: any = {}\r\n    document.location.search.substr(1).split('&').forEach((pair) => {\r\n        const [key, value] = pair.split('=')\r\n        params[key] = value\r\n    })\r\n    return params;\r\n};\r\n\r\nconst Page404: React.FC<any> = (props) => {\r\n    return (\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"Sorry, the page you visited does not exist.\"\r\n            extra={<Button type=\"primary\">Back Home</Button>}\r\n        />\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
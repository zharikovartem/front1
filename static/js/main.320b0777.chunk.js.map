{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","undefined","setFieldValue","target","checked","Array","isArray","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","mode","autoHeight","console","log","defaultChecked","locale","enUs","className","cols","onPickerChange","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","settings","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","enableReinitialize","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","open","TaskItemMobile","backgroundColor","autoClose","right","text","onPress","element","left","splitDate","setFullYear","parseInt","setDate","onEdit","wrap","toString","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","itemTime","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","as","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","zeroTime","ToDoBrowser","onClose","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","formProps","resetForm","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","getUsersList","UsersList","usersReducer","rootReducer","combineReducers","app","users","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","disabled","LoginForm","Login","email","password","block","Orders","NewProjectForm","frontend","setFrontend","backend","setBackend","submitFrontEnd","val","submitBackEnd","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","childsTasklList","CollapseItem","getChildsList","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","TasksTreeBrowser","taskTreeTypes","runTaskVisible","setRunTaskVisible","runData","setRunData","filter","dataSource","renderItem","newTaskList","okText","cancelText","newToDo","lead_name","description","phone_number","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","TasksTreeMobile","initialTimeToComplete","onAdd","onOpenChange","parentId","isSubform","childTypes","RegisterForm","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UsersMobile","UserDataForm","userData","created_at","updated_at","phone","updateUser","FormFielsd","isChanged","setIsChanged","submitPosible","CurrentUser","match","params","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","MainApp","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.320b0777.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        // 25 29 33 44 \r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n\r\n        if (props.onChange) {\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    \r\n    if (label === 'Name') {\r\n        // console.log(label,': ',field.value)\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        // console.log(props.label,': ',props.value)\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n    if (props.type === 'textarea') {\r\n        console.log(autoHeight)\r\n    }\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                onOk={onOk}\r\n                onPickerChange={onPickerChange}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode, useState } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    // console.log(viewSettings)\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse)\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        // console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    // console.log('settings: ', settings)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                // initialValues={settingasInstanse}\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        console.log(remember_token)\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        console.log(data)\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            console.log(state.viewSettings)\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n\r\n            // viewSettings[action.settingType] = action.settings\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            console.log(viewSettings)\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                console.log(response.data.message)\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        console.log('register', response)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            console.log(response.data)\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            // console.log('createNewTask', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        // console.log(instance.defaults.headers.common['X-Auth-Token'])\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            // console.log('updateTask: ',response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            //console.log('SET_IS_INTERVAL')\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            //console.log(response)\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    useEffect(() => {\r\n        // props.values = props.initialValues\r\n        console.log('useEffect ToDoForm values', props.values)\r\n        // console.log('useEffect ToDoForm initialValues',props.initialValues)\r\n        // const values: any = props.values\r\n        // const taskTypes = values.task_type\r\n    }, [props.values])\r\n    console.log('ToDoForm render', props.values)\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formPropsCopy: NewTaskDataType = { \r\n            ...values, \r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n        // let date = NewTimeByString(value.date)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => props.onComplete(props.element),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map( (item: TaskType) => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map( (task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    // console.log('view settings: ',props.settings.ToDo)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\">\r\n                                    <TaskItem element={element} onEdit={onEdit}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        console.log('name: ', initialFormValues.name)\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        console.log('onTaskEdit')\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        console.log(values)\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        console.log(values)\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {instance, getToken} from './api'\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    view_settings: string,\r\n    email: string,\r\n    status: 'admin' | 'superAdmin' | 'guest'\r\n}\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        // console.log(instance.defaults.headers.common['X-Auth-Token'])\r\n        return instance.get<UsersListType>(`account`) // users\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        console.log(values)\r\n        return instance.put<UsersListType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            console.log('updateUser: ',response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport {usersAPI, UserType} from '../api/usersAPI'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\n// import moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    usersList: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return {...state, usersList: action.usersList}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.getUsersList()\r\n        console.log(response)\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    console.log(userId)\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        console.log(response)\r\n        // dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        console.log(userStatus)\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm as any}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\n\r\nconst NewProjectForm: React.FC<any> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        console.log('submitFrontEnd')\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        console.log('submitBackEnd')\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                onSelect={submitBackEnd}\r\n            />\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isCRA\"\r\n                    label=\"Choise Backend Type\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                </>\r\n            :null}\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        console.log('onSelect: ',val)\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                onOk={ (val:any)=>{console.log('111', val)}}\r\n            />\r\n            {isNewType === 1 ? <div>old</div> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        console.log(props.values)\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {\r\n        console.log('onSelectTaskType', val)\r\n    }\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    // validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                // hasFeedback\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined  } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number)=>void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log('onAddSubtask to: ', taskId)\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('onStatusChange', Number.parseInt(e.target.id))\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        console.log('deleteTask: ', taskId)\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:TaskListType)=>void\r\n}\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    console.log(props.childsTasklList)\r\n    // let vals = Array.from( props.childsTasklList.values() )\r\n    // console.log(vals)\r\n    return (\r\n        <>\r\n            { props.childsTasklList.map((item: TaskListType) => {\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                        onRunTask={props.onRunTask}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: any\r\n    item: any,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    // const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n    const isLast  = getChildsList(props.taskList, props.item).length === 0 ? true : false \r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {\r\n                    props.item.isCompleted ? \r\n                        <span className=\"text-black-50\">{props.item.name}</span> \r\n                    : \r\n                        // <button className=\"btn btn-link\" data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</button >\r\n                        <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n            {props.item.task_type > 1 ?\r\n                <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onRunTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <CaretRightOutlined  className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            :\r\n            null\r\n            }\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: any, item: any ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    const getSelectOptions = (): Array<SelectOptionType> | null => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    \r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList, initialValues, props])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                if (item.id === values) {\r\n                    return item\r\n                }\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        // setInitialFormValues({ ...initialValues })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        console.log(formProps)\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={initialValues}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        //console.log(props.taskItem.id, ': onSubTask')\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n        console.log('parent_id:', props.taskItem.parent_id)\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            task_type: 0\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        // console.log('task_type', task.task_type)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        // console.log('new_time_to_complete', time_to_complete.toTimeString())\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        // console.log('new_time_to_complete', new_time_to_complete)\r\n\r\n        // console.log('initialFormValues', props.initialFormValues)\r\n        // console.log('task', {\r\n        //     ...props.initialFormValues,\r\n        //     name: task.name,\r\n        //     time_to_complete: new_time_to_complete,\r\n        //     descriptions: task.descriptions,\r\n        //     parent_id: [task.parent_id],\r\n        //     task_type: [ task.task_type ]\r\n        // })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: task.parent_id,\r\n            task_type:  Number(task.task_type) \r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        console.log('onItemOpen')\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name\r\n            // taskId: props.taskItem.id\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        //console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = NewTimeByString()\r\n\r\n    type SelectOptionType = {\r\n        name: string,\r\n        value: number\r\n    }\r\n\r\n    type InitialValuesType = {\r\n        selectOptions: Array<SelectOptionType> | null,\r\n        taskTypes: typeof taskTreeTypes,\r\n        task_type: Array<number>,\r\n        name?: string,\r\n        descriptions?: string\r\n        // parent_id?: Array<number>\r\n        parent_id?: number\r\n        time_to_complete?: Date\r\n    }\r\n\r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: [1],\r\n        time_to_complete: initialTimeToComplete,\r\n        // name: 'empty'\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...initialValues, parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...initialValues, parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile drawerData', drawerData)\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={\r\n                        <h4 className=\"w-100 text-center\">Tasks Tree</h4>\r\n                        // drawerData.header === 'Tasks Tree' ?\r\n                        // <h4 className=\"w-100 text-center\">{drawerData.header}</h4>\r\n                        // :\r\n                        // <div>{drawerData.header}</div>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Проект',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register( {...formProps, status: 'guest'} )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm as any}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList] )\r\n\r\n    let { url } = useRouteMatch();\r\n\r\n    console.log(props)\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <li>getUserList</li>\r\n            <li>show User List</li>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{console.log('onClick')}}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <h5>UsersMobile</h5>\r\n            <li>getUserList</li>\r\n            <li>show User List</li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Input } from 'antd'\r\nimport { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { UserType } from '../../../redux/authReducer'\r\nimport usersReducer from '../../../redux/usersReducer'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validateEmail, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        console.log(values)\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n    console.log(props.userData)\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                render={FormFielsd as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport TimeScale from '../../TimeScale/TimeScaleContainer'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeaderContainer'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList])\r\n\r\n    const getTargetUser = (userId: number) => {\r\n        return props.usersList.filter((item: any) => item.id.toString() === userId)[0]\r\n    }\r\n\r\n    const user = getTargetUser(props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    console.log(user)\r\n\r\n    if (user) {\r\n        return (\r\n            <div>\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser}/>\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <p>Вывести список всез задач с пагинацией</p>\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            showDrawer={() => { console.log('showDrawer') }}\r\n                            showModal={() => { console.log('showModal') }}\r\n                        />\r\n                        <TimeScale onEdit={onTaskEdit} />\r\n                    </Panel>\r\n                    <Panel header=\"Relations\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default CurrentUser\r\n","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\n// import { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../api/usersAPI'\r\n\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser}) \r\n    (CurrentUser)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n        setLocation(location)\r\n      }\r\n      props.initializeApp()\r\n    }\r\n  }, [props, location])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  console.log(props.userStatus)\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n          :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n        }\r\n\r\n        {props.isAuth ?\r\n          <Route exact path={props.appLocation + 'login'}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n          />\r\n          :\r\n          null\r\n        }\r\n\r\n        <Route path={props.appLocation + 'login'}\r\n          render={() => <Login />} />\r\n\r\n        <Route path={props.appLocation + 'toDoList'}\r\n          render={() => <ToDoList />} />\r\n\r\n        <Route path={props.appLocation + 'tasksTree'}\r\n          render={() => <TasksTree />} />\r\n\r\n        <Route path={props.appLocation + 'orders'}\r\n          render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation + 'register'}\r\n          render={() => <Register />} />\r\n\r\n\r\n\r\n        {props.userStatus === 'admin' || props.userStatus === 'superAdmin' ?\r\n          <>\r\n\r\n          <Route path={props.appLocation + 'users/:userId'} component={CurrentUser} />\r\n            {/* render={() => <CurrentUser />} /> */}\r\n\r\n          <Route exact path={props.appLocation + 'users'}\r\n            render={() => <Users />} />\r\n\r\n          </>\r\n          :\r\n          null\r\n        }\r\n\r\n\r\n        <Route path={props.appLocation + '*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth,\r\n  userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params: any = {}\r\n  document.location.search.substr(1).split('&').forEach((pair) => {\r\n    const [key, value] = pair.split('=')\r\n    params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(//console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
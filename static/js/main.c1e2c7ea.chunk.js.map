{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","undefined","setFieldValue","target","checked","Array","isArray","onChange","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","mode","defaultChecked","locale","enUs","autoHeight","className","cols","onPickerChange","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","Number","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","viewSettings","console","log","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","settings","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","enableReinitialize","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","authAPI","remember_token","localStorage","getItem","sessionStorage","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","getToken","defaults","headers","common","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","open","TaskItemMobile","backgroundColor","autoClose","right","text","onPress","element","left","splitDate","setFullYear","parseInt","setDate","onEdit","wrap","toString","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","itemTime","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","length","i","timeVal","concat","zeroTime","ToDoBrowser","onClose","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","formProps","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","MenuContainer","disabled","LoginForm","Login","email","password","block","Orders","NewProjectForm","frontend","setFrontend","backend","setBackend","submitFrontEnd","val","submitBackEnd","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","childsTasklList","CollapseItem","getChildsList","isLast","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","TasksTreeBrowser","taskTreeTypes","runTaskVisible","setRunTaskVisible","runData","setRunData","filter","dataSource","renderItem","newTaskList","okText","cancelText","newToDo","lead_name","description","phone_number","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","TasksTreeMobile","initialTimeToComplete","onAdd","onOpenChange","parentId","isSubform","childTypes","RegisterForm","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.c1e2c7ea.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                onOk={onOk}\r\n                onPickerChange={onPickerChange}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode, useState } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    console.log(viewSettings)\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse)\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    console.log('settings: ', settings)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                // initialValues={settingasInstanse}\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        console.log(remember_token)\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        console.log(data)\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            console.log(state.viewSettings)\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n\r\n            // viewSettings[action.settingType] = action.settings\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            console.log(viewSettings)\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                console.log(response.data.message)\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        console.log('register', response)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            console.log(response.data)\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            console.log('createNewTask', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        console.log(instance.defaults.headers.common['X-Auth-Token'])\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            // console.log('updateTask: ',response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            //console.log('SET_IS_INTERVAL')\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            //console.log(response)\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formPropsCopy: NewTaskDataType = { \r\n            ...values, \r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n        // let date = NewTimeByString(value.date)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => props.onComplete(props.element),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map( (item: TaskType) => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map( (task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    console.log('view settings: ',props.settings.ToDo)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.getTaskList])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues({ ...initialValues })\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType, MenuDataType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [showMenu, setShowMenu] = useState(false)\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<MenuDataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? initData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    return <MenuContainer menuData={menuData(props.appLocation)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm as any}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\n\r\nconst NewProjectForm: React.FC<any> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        console.log('submitFrontEnd')\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        console.log('submitBackEnd')\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                onSelect={submitBackEnd}\r\n            />\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isCRA\"\r\n                    label=\"Choise Backend Type\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                </>\r\n            :null}\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        console.log('onSelect: ',val)\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                onOk={ (val:any)=>{console.log('111', val)}}\r\n            />\r\n            {isNewType === 1 ? <div>old</div> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {\r\n        console.log('onSelectTaskType', val)\r\n    }\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    // validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                // hasFeedback\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React, { useState } from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined  } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number)=>void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log('onAddSubtask to: ', taskId)\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('onStatusChange', Number.parseInt(e.target.id))\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        console.log('deleteTask: ', taskId)\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:TaskListType)=>void\r\n}\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    console.log(props.childsTasklList)\r\n    // let vals = Array.from( props.childsTasklList.values() )\r\n    // console.log(vals)\r\n    return (\r\n        <>\r\n            { props.childsTasklList.map((item: TaskListType) => {\r\n                // console.log(props.childsTasklList.get(item.id))\r\n            {/* { props.childsTasklList .map((item: TaskListType) => { */}\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                        onRunTask={props.onRunTask}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: any\r\n    item: any,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    const onStatusChange = (e: any) => {\r\n        const values = { ...props.item, isCompleted: e.target.checked }\r\n        props.onEdit(values)\r\n    }\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {props.item.isCompleted ? <span className=\"text-black-50\">{props.item.name}</span> : <a data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</a>}\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n            {props.item.task_type > 1 ?\r\n                <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onRunTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <CaretRightOutlined  className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            :\r\n            null\r\n            }\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: any, item: any ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    \r\n    const getSelectOptions = (): Array<SelectOptionType> | null => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                if (item.id === values) {\r\n                    return item\r\n                }\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues({ ...initialValues })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        console.log(formProps)\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={initialValues}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        //console.log(props.taskItem.id, ': onSubTask')\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n        console.log('parent_id:', props.taskItem.parent_id)\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: [Number(props.taskItem.id)],\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        // console.log('task_type', task.task_type)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        // console.log('new_time_to_complete', time_to_complete.toTimeString())\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        // console.log('new_time_to_complete', new_time_to_complete)\r\n\r\n        // console.log('initialFormValues', props.initialFormValues)\r\n        // console.log('task', {\r\n        //     ...props.initialFormValues,\r\n        //     name: task.name,\r\n        //     time_to_complete: new_time_to_complete,\r\n        //     descriptions: task.descriptions,\r\n        //     parent_id: [task.parent_id],\r\n        //     task_type: [ task.task_type ]\r\n        // })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: [task.parent_id],\r\n            task_type: [ Number(task.task_type) ]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        console.log('onItemOpen')\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        // props.setDrawerData({\r\n        //     header: 'Edit: \"' + props.taskItem.name + '\"',\r\n        //     taskId: props.taskItem.id\r\n        // })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        //console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = NewTimeByString()\r\n\r\n    type SelectOptionType = {\r\n        name: string,\r\n        value: number\r\n    }\r\n\r\n    type InitialValuesType = {\r\n        selectOptions: Array<SelectOptionType> | null,\r\n        taskTypes: typeof taskTreeTypes,\r\n        task_type: Array<number>,\r\n        name?: string,\r\n        descriptions?: string\r\n        // parent_id?: Array<number>\r\n        parent_id?: number\r\n        time_to_complete?: Date\r\n    }\r\n\r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: [1],\r\n        time_to_complete: initialTimeToComplete,\r\n        // name: 'empty'\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...initialValues, parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...initialValues, parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('initialFormValues', initialFormValues)\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree!</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Проект',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register( {...formProps, status: 'guest'} )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm as any}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n        setLocation(location)\r\n      }\r\n      props.initializeApp()\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n          :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n        }\r\n\r\n        {props.isAuth ?\r\n          <Route exact path={props.appLocation + 'login'}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n          />\r\n          :\r\n          null\r\n        }\r\n\r\n        <Route path={props.appLocation + 'login'}\r\n          render={() => <Login />} />\r\n\r\n        <Route path={props.appLocation + 'toDoList'}\r\n          render={() => <ToDoList />} />\r\n\r\n        <Route path={props.appLocation + 'tasksTree'}\r\n          render={() => <TasksTree />} />\r\n\r\n        <Route path={props.appLocation + 'orders'}\r\n          render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation + 'register'}\r\n          render={() => <Register />} />\r\n\r\n        <Route path={props.appLocation + '*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params: any = {}\r\n  document.location.search.substr(1).split('&').forEach((pair) => {\r\n    const [key, value] = pair.split('=')\r\n    params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(//console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
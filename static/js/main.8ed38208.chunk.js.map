{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","redux/usersSelector.ts","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","undefined","setFieldValue","target","checked","Array","isArray","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","onOkCheck","mode","autoHeight","onPickerChangeCheck","defaultChecked","locale","enUs","className","cols","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","settings","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","enableReinitialize","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","console","log","formatString","style","marginLeft","dateString","e","isReadOnly","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","disabled","initialStatus","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","open","TaskItemMobile","backgroundColor","autoClose","right","text","onPress","element","left","splitDate","setFullYear","parseInt","setDate","onEdit","wrap","toString","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","filter","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","as","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","zeroTime","ToDoBrowser","onClose","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","formProps","resetForm","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","changedUserData","getUsersList","UsersList","usersReducer","statetCopy","newUserList","rootReducer","combineReducers","app","users","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","LoginForm","Login","email","password","block","Orders","NewProjectForm","frontend","setFrontend","backend","setBackend","submitFrontEnd","val","submitBackEnd","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","childsTasklList","CollapseItem","getChildsList","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","getInitialValues","getSelectOptions","taskTreeTypes","TasksTreeBrowser","runTaskVisible","setRunTaskVisible","runData","setRunData","dataSource","renderItem","newTaskList","okText","cancelText","newToDo","lead_name","description","phone_number","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","initialTimeToComplete","TasksTreeMobile","onAdd","onOpenChange","parentId","isSubform","childTypes","RegisterForm","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UsersMobile","getUsersListSelector","createSelector","UserDataForm","userData","created_at","updated_at","phone","updateUser","FormFielsd","isChanged","setIsChanged","submitPosible","CurrentUser","defaultPageSize","setDefaultPageSize","currentPage","setCurrentPage","toDoFormVisible","setToDoFormVisible","match","params","setDateInterval","toDoList","toDoPart","startIndex","endIndex","total","showTotal","range","defaultCurrent","onShowSizeChange","current","tasklist","toDo","isBetween","TodoItem","timeParts","authActions","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","MainApp","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.8ed38208.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = (): string => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n    return instance.defaults.headers.common['X-Auth-Token']\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        // 25 29 33 44 \r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n\r\n        if (props.onChange) {\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value, props.type])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n\r\n    const onPickerChangeCheck = props.type === 'date' || 'time' ? onPickerChange : null\r\n\r\n    let onOkCheck\r\n    if (props.AntComponent.onOk) {\r\n        onOkCheck = onOk\r\n    }\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                // onOk={onOk}\r\n                {...onOkCheck}\r\n                // onPickerChange={onPickerChange}\r\n                {...onPickerChangeCheck}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const settings = props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                // initialValues={settingasInstanse}\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n\r\n            // viewSettings[action.settingType] = action.settings\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n    toDoList?: Array<any> \r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            { !props.isReadOnly ?\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen?: boolean,\r\n    isReadOnly?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => void\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    console.log(props)\r\n\r\n    const disabled = props.initialStatus === 'readOnly' ? true : false\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            { !disabled ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval, props.getTaskList])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formPropsCopy: NewTaskDataType = {\r\n            ...values,\r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n        // let date = NewTimeByString(value.date)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            key={props.element.id}\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => props.onComplete(props.element),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList\r\n                .filter((item: TaskType) => {\r\n                    return item.date === date && moment().hours(hour).format('HH') === item.time.split(':')[0]\r\n                })\r\n                .map((item: TaskType) => {\r\n                    return (\r\n                        <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    )\r\n                })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <div key={index + 'div'}>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </div>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <div key={date.format('DD MMMM') + 'divBlock'}>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <div key={date.format('DD MMMM')}>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map((task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </div>\r\n                    // </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                { !props.isReadOnly ? \r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    ></Button>\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n                : null }\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                getTaskList()(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval, props.getTaskList, selestedDates])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    // console.log('view settings: ',props.settings.ToDo)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit, props.isReadOnly ? props.isReadOnly : false)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (\r\n    taskList: Array<TaskType>, \r\n    isInterval:boolean, \r\n    onEdit:(value:any)=>void,\r\n    isReadOnly: boolean\r\n    ):Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType):string => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key={'noTasks'+index}>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\" key={index}>\r\n                                    <TaskItem key={index} element={element} onEdit={onEdit} isReadOnly={isReadOnly}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit , isReadOnly))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList === null) {\r\n            getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList, props.getTaskList, props.dateInterval])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n\r\n        actions.resetForm()\r\n        \r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\n// export type UserType = {\r\n//     id: number,\r\n//     name: string,\r\n//     view_settings: string,\r\n//     email: string,\r\n//     status: 'admin' | 'superAdmin' | 'guest',\r\n//     toDoList?: Array<any> \r\n// }\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        return instance.get<UsersListType>(`account`) // users\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        return instance.put<UserType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI, } from '../api/usersAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\nimport { actions as authActions } from './authReducer'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    usersList: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/UPDATE_USERS_LIST':\r\n            let statetCopy = { ...state }\r\n            const newUserList = statetCopy.usersList.map((item: UserType) => {\r\n                if (item.id !== action.changedUserData.id) {\r\n                    return item\r\n                } else {\r\n                    return action.changedUserData\r\n                }\r\n            })\r\n            return { ...state, usersList: newUserList }\r\n\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return { ...state, usersList: action.usersList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n    updateUserList: (changedUserData: UserType) => ({ type: 'SN/USERS/UPDATE_USERS_LIST', changedUserData } as const)\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await usersAPI.getUsersList()\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    console.log(userId)\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        dispatch(actions.updateUserList(response.data.changedUserData))\r\n        const state = getState()\r\n        if (state.auth.user && state.auth.user.id === response.data.changedUserData.id) {\r\n            const data: UserType = response.data.changedUserData\r\n            // @ts-ignore\r\n            dispatch(authActions.setAuthUserData(data, null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm as any}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\n\r\nconst NewProjectForm: React.FC<any> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        console.log('submitFrontEnd')\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        console.log('submitBackEnd')\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                onSelect={submitBackEnd}\r\n            />\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isCRA\"\r\n                    label=\"Choise Backend Type\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                </>\r\n            :null}\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        console.log('onSelect: ',val)\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                onOk={ (val:any)=>{console.log('111', val)}}\r\n            />\r\n            {isNewType === 1 ? <div>old</div> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        console.log(props.values)\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {\r\n        console.log('onSelectTaskType', val)\r\n    }\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    // validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                // hasFeedback\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined  } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number)=>void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:TaskListType)=>void\r\n}\r\n\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    return (\r\n        <>\r\n            { props.childsTasklList.map((item: TaskListType) => {\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                        onRunTask={props.onRunTask}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: any\r\n    item: any,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    // const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n    const isLast  = getChildsList(props.taskList, props.item).length === 0 ? true : false \r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {\r\n                    props.item.isCompleted ? \r\n                        <span className=\"text-black-50\">{props.item.name}</span> \r\n                    : \r\n                        // <button className=\"btn btn-link\" data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</button >\r\n                        <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n            {props.item.task_type > 1 ?\r\n                <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onRunTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <CaretRightOutlined  className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            :\r\n            null\r\n            }\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: any, item: any ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\n// type SelectOptionType = {\r\n//     name: string,\r\n//     value: number\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            task_type: 0\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: task.parent_id,\r\n            task_type:  Number(task.task_type) \r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\ntype InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: Array<number>,\r\n    name?: string,\r\n    descriptions?: string\r\n    // parent_id?: Array<number>\r\n    parent_id?: number\r\n    time_to_complete?: Date\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: [1],\r\n            time_to_complete: initialTimeToComplete,\r\n        }\r\n    )\r\n}\r\n\r\nlet initialTimeToComplete = NewTimeByString()\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        // const getInitialValues = () => initialValues\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        } else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        // setInitialFormValues(getInitialValues())\r\n        setInitialFormValues( getInitialValues(props.taskList) )\r\n    }, [ props.taskList, props.getTaskList, props.isTaskListLoaded ])\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...getInitialValues(props.taskList), parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...getInitialValues(props.taskList), parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={\r\n                        <h4 className=\"w-100 text-center\">Tasks Tree</h4>\r\n                        // drawerData.header === 'Tasks Tree' ?\r\n                        // <h4 className=\"w-100 text-center\">{drawerData.header}</h4>\r\n                        // :\r\n                        // <div>{drawerData.header}</div>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList\r\n                            .map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1] // Добавляем последний выбранный id\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Проект',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register( {...formProps, status: 'guest'} )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm as any}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n\r\n    let { url } = useRouteMatch();\r\n\r\n    console.log(props)\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <li>getUserList</li>\r\n            <li>show User List</li>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{console.log('onClick')}}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <h5>UsersMobile</h5>\r\n            <li>getUserList</li>\r\n            <li>show User List</li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './store'\r\n\r\nconst UsersItemsSelector = (state: AppStateType) => state.users.usersList\r\n\r\nexport const getUsersListSelector = createSelector(UsersItemsSelector,\r\n    (users) => {\r\n        return users\r\n    }\r\n)","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\nimport {getUsersListSelector} from './../../redux/usersSelector'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: getUsersListSelector(state)\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                render={FormFielsd as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n                // validate={validateEmail}\r\n                // onChange={submitPosible}\r\n                // submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../../Types/types'\r\nimport TimeScale from '../../TimeScale/TimeScale'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeader'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues, InitialValuesType } from './../../ToDo/ToDoBrowser'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { UserType } from '../../../redux/authReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n    }, [props.usersList, props.getUsersList])\r\n\r\n    const [defaultPageSize, setDefaultPageSize] = useState(10)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const getTargetUser = (userId: string) => {\r\n        return props.usersList.filter((item: UserType) => item.id.toString() === userId )[0]\r\n    }\r\n\r\n    const user = getTargetUser(props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onShowSizeChange = (current: number, size: number) => {\r\n        setDefaultPageSize(size)\r\n    }\r\n\r\n    const toDoPart = (): Array<TaskType> => {\r\n        let toDoPart: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n            const startIndex = (currentPage - 1) * defaultPageSize\r\n            const endIndex = startIndex + defaultPageSize\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const element = user.toDoList[index];\r\n                if (index >= startIndex && index < endIndex) {\r\n                    toDoPart.push(element)\r\n                }\r\n\r\n            }\r\n        }\r\n        return toDoPart\r\n    }\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),//.add(-1,'day'),\r\n        endDate: moment()//.add(1,'day')\r\n    })\r\n\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n\r\n    const getTaskList = (startDate: string, endDate: string) => {\r\n        let tasklist: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const toDo = user.toDoList[index];\r\n                if (moment(toDo.date).isBetween(\r\n                    moment(dateInterval.startDate.format('YYYY-MM-DD')).add(-1, 'day'),\r\n                    moment(dateInterval.endDate.format('YYYY-MM-DD')).add(1, 'day'),\r\n                    'day')) {\r\n                    tasklist.push(toDo)\r\n                }\r\n            }\r\n        }\r\n        setTaskList(tasklist)\r\n    }\r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n    }\r\n\r\n    const onToDoFormClose = () => {\r\n        console.log('onToDoFormClose')\r\n        setInitialFormValues(initialValues)\r\n        setToDoFormVisible(false)\r\n    }\r\n\r\n    const handleSubmitToDoForm = () => {\r\n        console.log('handleSubmitToDoForm')\r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <List>\r\n                            {user.toDoList ? toDoPart().map((item: TaskType) => {\r\n                                return <TodoItem \r\n                                    key={item.id.toString()} \r\n                                    item={item} \r\n                                    setToDoFormVisible={setToDoFormVisible}\r\n                                    setInitialFormValues={setInitialFormValues}\r\n                                    />\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n                        <Pagination\r\n                            total={user.toDoList?.length}\r\n                            showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                            defaultPageSize={10}\r\n                            defaultCurrent={1}\r\n                            onChange={onPagination}\r\n                            onShowSizeChange={onShowSizeChange}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            showDrawer={() => { console.log('showDrawer') }}\r\n                            showModal={() => { console.log('showModal') }}\r\n                            isReadOnly={true}\r\n                        />\r\n                        <TimeScale\r\n                            onEdit={onTaskEdit}\r\n                            dateInterval={dateInterval}\r\n                            errorMessage={props.errorMessage}\r\n                            getTaskList={getTaskList}\r\n                            isInterval={props.isInterval}\r\n                            settings={props.settings}\r\n                            taskList={taskList}\r\n                            taskListIsFetching={false}\r\n                            taskSaveStatus={props.taskSaveStatus}\r\n                            isReadOnly={true}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Related users\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n                <Drawer\r\n                    // title={drawerData.header}\r\n                    title={initialFormValues.name}\r\n                    placement=\"right\"\r\n                    closable={true}\r\n                    onClose={onToDoFormClose}\r\n                    visible={toDoFormVisible}\r\n                    width=\"90%\"\r\n                >\r\n                    <Formik\r\n                        initialValues={initialFormValues}\r\n                        onSubmit={handleSubmitToDoForm}\r\n                        render={ToDoForm as any}\r\n                        enableReinitialize={true}\r\n                        // test='123'\r\n                        initialStatus={'readOnly'}\r\n                    />\r\n                </Drawer>\r\n\r\n            </div >\r\n        )\r\n    } else {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n}\r\n}\r\n\r\nexport default CurrentUser\r\n\r\ntype TodoItemPropsType = {\r\n    item: TaskType,\r\n    key: string,\r\n    setToDoFormVisible:  React.Dispatch<React.SetStateAction<boolean>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>\r\n}\r\nconst TodoItem: React.FC<TodoItemPropsType> = (props) => {\r\n    const showDrawer = (item: TaskType) => {\r\n        console.log('showDrawer', item)\r\n        props.setToDoFormVisible(true)\r\n        const timeParts = item.time.split(':')\r\n        props.setInitialFormValues({\r\n            name: item.name,\r\n            // time: moment(item.time),\r\n            time: moment().hours(Number(timeParts[0])).minutes(Number(timeParts[1])).seconds(Number(timeParts[2])),\r\n            date: moment(item.date),\r\n            descriptions: item.descriptions ? item.descriptions : null\r\n        })\r\n    }\r\n    return (\r\n        <List.Item\r\n            key={props.item.id}\r\n            actions={[<Button onClick={() => { showDrawer(props.item) }} type=\"link\" block>Show</Button>]}\r\n        >\r\n            {props.item.name}\r\n        </List.Item>\r\n    )\r\n}\r\n\r\n","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\n// import { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../redux/authReducer'\r\n// import { UserType } from '../../../api/usersAPI'\r\n\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        settings:state.auth.viewSettings\r\n        // taskList\r\n        // taskListIsFetching={false}\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser}) \r\n    (CurrentUser)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n        setLocation(location)\r\n      }\r\n      props.initializeApp()\r\n    }\r\n  }, [props, location])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n          :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n        }\r\n\r\n        {props.isAuth ?\r\n          <Route exact path={props.appLocation + 'login'}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n          />\r\n          :\r\n          null\r\n        }\r\n\r\n        <Route path={props.appLocation + 'login'}\r\n          render={() => <Login />} />\r\n\r\n        <Route path={props.appLocation + 'toDoList'}\r\n          render={() => <ToDoList />} />\r\n\r\n        <Route path={props.appLocation + 'tasksTree'}\r\n          render={() => <TasksTree />} />\r\n\r\n        <Route path={props.appLocation + 'orders'}\r\n          render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation + 'register'}\r\n          render={() => <Register />} />\r\n\r\n\r\n\r\n        {props.userStatus === 'admin' || props.userStatus === 'superAdmin' ?\r\n          <>\r\n\r\n          <Route path={props.appLocation + 'users/:userId'} component={CurrentUser} />\r\n            {/* render={() => <CurrentUser />} /> */}\r\n\r\n          <Route exact path={props.appLocation + 'users'}\r\n            render={() => <Users />} />\r\n\r\n          </>\r\n          :\r\n          null\r\n        }\r\n\r\n\r\n        <Route path={props.appLocation + '*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth,\r\n  userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params: any = {}\r\n  document.location.search.substr(1).split('&').forEach((pair) => {\r\n    const [key, value] = pair.split('=')\r\n    params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","redux/usersSelector.ts","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserMobile.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","undefined","setFieldValue","target","checked","Array","isArray","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","onOkCheck","mode","autoHeight","onPickerChangeCheck","disabled","defaultChecked","locale","enUs","className","cols","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","settings","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","enableReinitialize","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","isReadOnly","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialStatus","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","resetForm","open","TaskItemMobile","wrap","element","toString","backgroundColor","autoClose","right","text","onPress","left","splitDate","setFullYear","parseInt","setMonth","setDate","onEdit","onOpen","onClose","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","filter","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","as","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","zeroTime","ToDoBrowser","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","formProps","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","changedUserData","getUsersList","UsersList","usersReducer","statetCopy","newUserList","rootReducer","combineReducers","app","users","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","LoginForm","Login","email","password","block","Orders","NewProjectForm","frontend","setFrontend","backend","setBackend","submitFrontEnd","val","submitBackEnd","ProjectForm","isNewType","setIsNewType","console","log","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","childsTasklList","CollapseItem","getChildsList","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","getInitialValues","getSelectOptions","taskTreeTypes","TasksTreeBrowser","runTaskVisible","setRunTaskVisible","runData","setRunData","dataSource","renderItem","newTaskList","okText","cancelText","newToDo","lead_name","description","phone_number","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","initialTimeToComplete","TasksTreeMobile","onAdd","onOpenChange","parentId","isSubform","childTypes","RegisterForm","statusOptions","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UserStatus","UsersMobile","getUsersListSelector","createSelector","UserDataForm","userData","created_at","updated_at","phone","updateUser","FormFielsd","isChanged","setIsChanged","submitPosible","getTargetUser","toDoPart","toDoList","currentPage","defaultPageSize","startIndex","endIndex","CurrentUser","setDefaultPageSize","setCurrentPage","toDoFormVisible","setToDoFormVisible","match","params","setDateInterval","total","showTotal","range","defaultCurrent","onShowSizeChange","current","tasklist","toDo","isBetween","TodoItem","timeParts","CurrentUserMobile","getTaskListCallback","useCallback","onTaskOpen","enUS","Math","ceil","authActions","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","MainApp","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.866b92d7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = (): string => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n    return instance.defaults.headers.common['X-Auth-Token']\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        // 25 29 33 44 \r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n\r\n        if (props.onChange) {\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n    \r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    {...props}\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void,\r\n    disabled?: boolean,\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value, props.type])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n    const onPickerChangeCheck = props.type === 'date' || 'time' ? onPickerChange : null\r\n    const disabled = props.disabled ? {disabled: true} : null\r\n\r\n    let onOkCheck\r\n    if (props.AntComponent.onOk) {\r\n        onOkCheck = onOk\r\n    }\r\n\r\n    if (props.disabled) {\r\n\r\n    }   \r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n                {...disabled}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                // onOk={onOk}\r\n                {...onOkCheck}\r\n                // onPickerChange={onPickerChange}\r\n                {...onPickerChangeCheck}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const settings = props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                // initialValues={settingasInstanse}\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n\r\n            // viewSettings[action.settingType] = action.settings\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n    toDoList?: Array<any> \r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            { !props.isReadOnly ?\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n            { !props.isReadOnly ?\r\n            <>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={ props.showModal ? props.showModal : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n            </>\r\n            : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer?: () => void,\r\n    showModal?: () => void,\r\n    isOpen?: boolean,\r\n    isReadOnly?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => void\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const disabled = props.initialStatus === 'readOnly' ? true : false\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            { !disabled ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval, props.getTaskList])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n            setDrawerData(initialDrewerData)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formPropsCopy: NewTaskDataType = {\r\n            ...values,\r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n    isReadOnly: boolean\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n        // let date = NewTimeByString(value.date)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1])-1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    \r\n\r\n    if (!props.isReadOnly) {\r\n        return (\r\n            <SwipeAction\r\n                key={props.element.id}\r\n                style={{ backgroundColor: 'gray' }}\r\n                autoClose\r\n                right={[\r\n                    {\r\n                        text: 'Delete',\r\n                        onPress: () => props.deleteTask(\r\n                            props.element.id,\r\n                            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                            props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                        ),\r\n                        style: { backgroundColor: '#F4333C', color: 'white' },\r\n                    },\r\n                ]}\r\n                left={[\r\n                    {\r\n                        text: 'Edit',\r\n                        onPress: () => { onEdit(props.element) },\r\n                        style: { backgroundColor: '#108ee9', color: 'white' },\r\n                    },\r\n                    {\r\n                        text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                        onPress: () => props.onComplete(props.element),\r\n                        style: { backgroundColor: 'green', color: 'white' },\r\n                    },\r\n                ]}\r\n    \r\n                onOpen={() => {\r\n                    // console.log('global onOpen')\r\n                }}\r\n                onClose={() => {\r\n                    // console.log('global close') \r\n                }}\r\n            >\r\n    \r\n                <List.Item\r\n                    key={props.element.id.toString()}\r\n                    wrap\r\n                >\r\n                    <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                        <div className=\"col-2 \">\r\n                            <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            {props.element.isCompleted ?\r\n                                <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                                :\r\n                                <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </List.Item>\r\n            </SwipeAction>\r\n        )\r\n    } else {\r\n        return (\r\n            <List.Item\r\n                    key={props.element.id.toString()}\r\n                    wrap\r\n                >\r\n                    <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                        <div className=\"col-2 \">\r\n                            <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            {props.element.isCompleted ?\r\n                                <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                                :\r\n                                <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </List.Item>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask?: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData?: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues?: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer?: () => void,\r\n    onComplete?: (values: TaskType) => void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList\r\n                .filter((item: TaskType) => {\r\n                    return item.date === date && moment().hours(hour).format('HH') === item.time.split(':')[0]\r\n                })\r\n                .map((item: TaskType) => {\r\n                    return (\r\n                        <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask ? props.deleteTask : ()=>{} }\r\n                            setDrawerData={props.setDrawerData ? props.setDrawerData : ()=>{} }\r\n                            setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : ()=>{} }\r\n                            showDrawer={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                            onComplete={props.onComplete ? props.onComplete : ()=>{} }\r\n                            isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                        />\r\n                    )\r\n                })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <div key={index + 'div'}>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </div>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <div key={date.format('DD MMMM') + 'divBlock'}>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <div key={date.format('DD MMMM')}>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map((task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask ? props.deleteTask : ()=>{} }\r\n                                    setDrawerData={props.setDrawerData ? props.setDrawerData : ()=>{} }\r\n                                    showDrawer={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                                    setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : ()=>{} }\r\n                                    onComplete={props.onComplete ? props.onComplete : ()=>{}}\r\n                                    isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </div>\r\n                    // </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                { !props.isReadOnly ? \r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    ></Button>\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n                : null }\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                getTaskList()(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval, props.getTaskList, selestedDates])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit, props.isReadOnly ? props.isReadOnly : false)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (\r\n    taskList: Array<TaskType>, \r\n    isInterval:boolean, \r\n    onEdit:(value:any)=>void,\r\n    isReadOnly: boolean\r\n    ):Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType):string => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key={'noTasks'+index}>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\" key={index}>\r\n                                    <TaskItem key={index} element={element} onEdit={onEdit} isReadOnly={isReadOnly}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit , isReadOnly))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList === null) {\r\n            getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList, props.getTaskList, props.dateInterval])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n\r\n        actions.resetForm()\r\n        \r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        return instance.get<UsersListType>(`account`) // users\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        return instance.put<UserType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI, } from '../api/usersAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\nimport { actions as authActions } from './authReducer'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    usersList: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/UPDATE_USERS_LIST':\r\n            let statetCopy = { ...state }\r\n            const newUserList = statetCopy.usersList.map((item: UserType) => {\r\n                if (item.id !== action.changedUserData.id) {\r\n                    return item\r\n                } else {\r\n                    return action.changedUserData\r\n                }\r\n            })\r\n            return { ...state, usersList: newUserList }\r\n\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return { ...state, usersList: action.usersList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n    updateUserList: (changedUserData: UserType) => ({ type: 'SN/USERS/UPDATE_USERS_LIST', changedUserData } as const)\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await usersAPI.getUsersList()\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        dispatch(actions.updateUserList(response.data.changedUserData))\r\n        const state = getState()\r\n        if (state.auth.user && state.auth.user.id === response.data.changedUserData.id) {\r\n            const data: UserType = response.data.changedUserData\r\n            // @ts-ignore\r\n            dispatch(authActions.setAuthUserData(data, null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory()\r\n    const location = useLocation()\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm as any}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\n\r\nconst NewProjectForm: React.FC<any> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                onSelect={submitBackEnd}\r\n            />\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isCRA\"\r\n                    label=\"Choise Backend Type\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                </>\r\n            :null}\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                onOk={ (val:any)=>{console.log('111', val)}}\r\n            />\r\n            {isNewType === 1 ? <div>old</div> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {\r\n        console.log('onSelectTaskType', val)\r\n    }\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    // validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                // hasFeedback\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined  } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number)=>void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values:number)=>void\r\n}\r\n\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    return (\r\n        <>\r\n            { props.childsTasklList.map((item: TaskListType) => {\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                        onRunTask={props.onRunTask}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: string\r\n    item: TaskListType,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values:number)=>void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    // const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n    const isLast  = getChildsList(props.taskList, props.item).length === 0 ? true : false \r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<any>) => void,\r\n    onRunTask: (values:number)=>void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id.toString()} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {\r\n                    props.item.isCompleted ? \r\n                        <span className=\"text-black-50\">{props.item.name}</span> \r\n                    : \r\n                        <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n    onRunTask: (values:number)=>void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n            {Number(props.item.task_type) > 1 ?\r\n                <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onRunTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <CaretRightOutlined  className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            :\r\n            null\r\n            }\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: Array<TaskListType>, item: TaskListType ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\n// type SelectOptionType = {\r\n//     name: string,\r\n//     value: number\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeMobile'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: InitialDrewerDataType) => void,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: (initialFormValues: InitialValuesType) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            // task_type: 0\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions ? task.descriptions : undefined,\r\n            parent_id: task.parent_id ? task.parent_id : undefined,\r\n            // task_type:  Number(task.task_type) \r\n            task_type:  [Number(task.task_type)]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name,\r\n            taskId: props.taskItem.id\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: Array<number>,\r\n    name?: string,\r\n    descriptions?: string\r\n    // parent_id?: Array<number>\r\n    parent_id?: number\r\n    time_to_complete?: Date\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: [1],\r\n            time_to_complete: initialTimeToComplete,\r\n        }\r\n    )\r\n}\r\n\r\nlet initialTimeToComplete = NewTimeByString()\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        // const getInitialValues = () => initialValues\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        } else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        // setInitialFormValues(getInitialValues())\r\n        setInitialFormValues( getInitialValues(props.taskList) )\r\n    }, [ props.taskList, props.getTaskList, props.isTaskListLoaded ])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...getInitialValues(props.taskList), parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...getInitialValues(props.taskList), parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={\r\n                        // <h4 className=\"w-100 text-center\">Tasks Tree</h4>\r\n                        drawerData.header === 'Tasks Tree' ?\r\n                        <h4 className=\"w-100 text-center\">{drawerData.header}</h4>\r\n                        :\r\n                        <div>{drawerData.header}</div>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList\r\n                            .map((item: TaskListType) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1] // Добавляем последний выбранный id\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Проект',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword, AntSelect } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"User Status\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n\r\ntype StatusOptionItemType = {\r\n    name: string,\r\n    value: string,\r\n    isSubform: boolean,\r\n}\r\n\r\ntype StatusOptionsType = Array<StatusOptionItemType>\r\n\r\nconst statusOptions: StatusOptionsType = [\r\n    {\r\n        name: 'Guest',\r\n        value: 'guest',\r\n        isSubform: false,\r\n    },\r\n    {\r\n        name: 'Admin',\r\n        value: 'admin',\r\n        isSubform: false,\r\n    },\r\n]","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register(formProps)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm as any}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n\r\n    let { url } = useRouteMatch();\r\n\r\n    console.log(props)\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                {props.UserStatus === 'superAdmin' ?\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{console.log('onClick')}}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, { useEffect } from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { List } from 'antd-mobile'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\n\r\nconst Item = List.Item\r\n// const Brief = Item.Brief\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n    \r\n    let { url } = useRouteMatch();\r\n    return (\r\n        <div>\r\n            <List renderHeader={() => 'Users:'} className=\"my-list\">\r\n                {   props.usersList.map( (item: any) => {\r\n                        return(\r\n                            <Item \r\n                                key={item.id}\r\n                                onClick={() => {console.log('onClick')}}\r\n                            >\r\n                                <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                            </Item>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './store'\r\n\r\nconst UsersItemsSelector = (state: AppStateType) => state.users.usersList\r\n\r\nexport const getUsersListSelector = createSelector(UsersItemsSelector,\r\n    (users) => {\r\n        return users\r\n    }\r\n)","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\nimport {getUsersListSelector} from './../../redux/usersSelector'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: getUsersListSelector(state),\r\n        UserStatus: state.auth.user?.status\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                render={FormFielsd as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n        {\r\n            name: 'Super Admin',\r\n            value: 'superAdmin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n                // validate={validateEmail}\r\n                // onChange={submitPosible}\r\n                // submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary mb-4\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../../Types/types'\r\nimport TimeScale from '../../TimeScale/TimeScale'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeader'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues, InitialValuesType } from './../../ToDo/ToDoBrowser'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { UserType } from '../../../redux/authReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetUser = (usersList: Array<UserType> ,userId: string):UserType  => {\r\n    return usersList.filter((item: UserType) => item.id.toString() === userId )[0]\r\n}\r\n\r\nexport const toDoPart = (\r\n    toDoList: Array<TaskType>,\r\n    currentPage: number,\r\n    defaultPageSize: number\r\n    ): Array<TaskType> => {\r\n    let toDoPart: Array<TaskType> = []\r\n    if (toDoList) {\r\n        const startIndex = (currentPage - 1) * defaultPageSize\r\n        const endIndex = startIndex + defaultPageSize\r\n        for (let index = 0; index < toDoList.length; index++) {\r\n            const element = toDoList[index];\r\n            if (index >= startIndex && index < endIndex) {\r\n                toDoPart.push(element)\r\n            }\r\n\r\n        }\r\n    }\r\n    return toDoPart\r\n}\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n    }, [props.usersList, props.getUsersList])\r\n\r\n    const [defaultPageSize, setDefaultPageSize] = useState(10)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    \r\n\r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onShowSizeChange = (current: number, size: number) => {\r\n        setDefaultPageSize(size)\r\n    }\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),//.add(-1,'day'),\r\n        endDate: moment()//.add(1,'day')\r\n    })\r\n\r\n    \r\n\r\n    const getTaskList = (startDate: string, endDate: string) => {\r\n        let tasklist: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const toDo = user.toDoList[index];\r\n                if (moment(toDo.date).isBetween(\r\n                    moment(dateInterval.startDate.format('YYYY-MM-DD')).add(-1, 'day'),\r\n                    moment(dateInterval.endDate.format('YYYY-MM-DD')).add(1, 'day'),\r\n                    'day')) {\r\n                    tasklist.push(toDo)\r\n                }\r\n            }\r\n        }\r\n        setTaskList(tasklist)\r\n    }\r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n    }\r\n\r\n    const onToDoFormClose = () => {\r\n        setInitialFormValues(initialValues)\r\n        setToDoFormVisible(false)\r\n    }\r\n\r\n    const handleSubmitToDoForm = () => {\r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, defaultPageSize).map((item: TaskType) => {\r\n                                return <TodoItem \r\n                                    key={item.id.toString()} \r\n                                    item={item} \r\n                                    setToDoFormVisible={setToDoFormVisible}\r\n                                    setInitialFormValues={setInitialFormValues}\r\n                                    />\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n                        <Pagination\r\n                            total={user.toDoList?.length}\r\n                            showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                            defaultPageSize={10}\r\n                            defaultCurrent={1}\r\n                            onChange={onPagination}\r\n                            onShowSizeChange={onShowSizeChange}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            showDrawer={() => { console.log('showDrawer') }}\r\n                            showModal={() => { console.log('showModal') }}\r\n                            isReadOnly={true}\r\n                        />\r\n                        <TimeScale\r\n                            onEdit={onTaskEdit}\r\n                            dateInterval={dateInterval}\r\n                            errorMessage={props.errorMessage}\r\n                            getTaskList={getTaskList}\r\n                            isInterval={props.isInterval}\r\n                            settings={props.settings}\r\n                            taskList={taskList}\r\n                            taskListIsFetching={false}\r\n                            taskSaveStatus={props.taskSaveStatus}\r\n                            isReadOnly={true}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Related users\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n                <Drawer\r\n                    // title={drawerData.header}\r\n                    title={initialFormValues.name}\r\n                    placement=\"right\"\r\n                    closable={true}\r\n                    onClose={onToDoFormClose}\r\n                    visible={toDoFormVisible}\r\n                    width=\"90%\"\r\n                >\r\n                    <Formik\r\n                        initialValues={initialFormValues}\r\n                        onSubmit={handleSubmitToDoForm}\r\n                        render={ToDoForm as any}\r\n                        enableReinitialize={true}\r\n                        initialStatus={'readOnly'}\r\n                    />\r\n                </Drawer>\r\n\r\n            </div >\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default CurrentUser\r\n\r\ntype TodoItemPropsType = {\r\n    item: TaskType,\r\n    key: string,\r\n    setToDoFormVisible:  React.Dispatch<React.SetStateAction<boolean>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>\r\n}\r\nconst TodoItem: React.FC<TodoItemPropsType> = (props) => {\r\n    const showDrawer = (item: TaskType) => {\r\n        props.setToDoFormVisible(true)\r\n        const timeParts = item.time.split(':')\r\n        props.setInitialFormValues({\r\n            name: item.name,\r\n            time: moment().hours(Number(timeParts[0])).minutes(Number(timeParts[1])).seconds(Number(timeParts[2])),\r\n            date: moment(item.date),\r\n            descriptions: item.descriptions ? item.descriptions : null\r\n        })\r\n    }\r\n    return (\r\n        <List.Item\r\n            key={props.item.id}\r\n            actions={[<Button onClick={() => { showDrawer(props.item) }} type=\"link\" block>Show</Button>]}\r\n        >\r\n            {props.item.name}\r\n        </List.Item>\r\n    )\r\n}\r\n\r\n","import { Spin } from 'antd'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { getTargetUser, toDoPart } from './CurrentUser'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport { Accordion, LocaleProvider, Pagination, List, NavBar, Icon, Drawer, Button } from 'antd-mobile'\r\nimport UserDataForm from './UserDataForm'\r\nimport enUS from 'antd-mobile/lib/locale-provider/en_US'\r\nimport './Pagination.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ToDoHeaderMobile from '../../ToDo/ToDoHeader/ToDoHeaderMobile'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues } from '../../ToDo/ToDoMobile'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\nimport {TasksOnly} from './../../ToDo/ToDoMobile'\r\nimport { TaskType } from '../../../Types/types'\r\n\r\nconst Item = List.Item\r\n\r\nconst CurrentUserMobile: React.FC<CurrentUserPropsType> = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    // const getTaskList = (startDate: string, endDate: string) => {\r\n    //     let taskList: Array<TaskType> = []\r\n    //     if (user.toDoList) {\r\n\r\n    //         for (let index = 0; index < user.toDoList.length; index++) {\r\n    //             const toDo = user.toDoList[index];\r\n    //             if (moment(toDo.date).isBetween(\r\n    //                 moment(startDate).add(-1, 'day'),\r\n    //                 moment(endDate).add(1, 'day'),\r\n    //                 'day')) {\r\n    //                     taskList.push(toDo)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     setTaskList(taskList)\r\n    // }\r\n\r\n    const getTaskListCallback = useCallback(\r\n        (startDate: string, endDate: string) => {\r\n            let taskList: Array<TaskType> = []\r\n            if (user.toDoList) {\r\n\r\n                for (let index = 0; index < user.toDoList.length; index++) {\r\n                    const toDo = user.toDoList[index];\r\n                    if (moment(toDo.date).isBetween(\r\n                        moment(startDate).add(-1, 'day'),\r\n                        moment(endDate).add(1, 'day'),\r\n                        'day')) {\r\n                            taskList.push(toDo)\r\n                    }\r\n                }\r\n            }\r\n            setTaskList(taskList)\r\n        },\r\n        [setTaskList, user.toDoList],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        // const getTaskListCalback = () => getTaskList\r\n\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (user && taskList === null) {\r\n            getTaskListCallback(dateInterval.startDate.format('YYYY-MM-DD'), dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n        \r\n    }, [props.usersList, props.getUsersList, dateInterval, user, taskList, getTaskListCallback])\r\n    \r\n    let history = useHistory()\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    \r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n        getTaskListCallback(date.startDate.format('YYYY-MM-DD'), date.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onTaskOpen = (task: TaskType) => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n        let time = NewTimeByString(task.time)\r\n\r\n        const splitDate = task.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1])-1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        setInitialFormValues({\r\n            name: task.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: task.descriptions ? task.descriptions : null\r\n        })\r\n    }\r\n\r\n    const onTaskClose = () => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        \r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div>\r\n                \r\n                <NavBar\r\n                     mode=\"light\"\r\n                    //  mode=\"dark\"\r\n                     icon={<Icon type=\"left\" />}\r\n                     onLeftClick={() => history.replace(props.appLocation+'users')}\r\n                     rightContent={[\r\n                        <p>User id: {props.match.params.userId}</p>\r\n                     ]}\r\n                ><span className=\"text-dark\">{user.name}</span></NavBar>\r\n\r\n                <Accordion defaultActiveKey=\"\" className=\"my-accordion\" onChange={onChange} >\r\n                    <Accordion.Panel header=\"User data\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"ToDo List\">\r\n                    <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <>\r\n                        <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"ml-3 mt-3 mb-5\"\r\n                                onClick={onTaskClose}\r\n                                type=\"primary\"\r\n                            >\r\n                                Close\r\n                            </Button>\r\n\r\n                        <div className=\"mt-1\">\r\n                            {/* <button onClick={onTaskClose}>Close</button> */}\r\n                            \r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={ToDoForm as any}\r\n                                enableReinitialize={true}\r\n                                initialStatus={'readOnly'}\r\n                            />\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    open={toDoFormVisible}\r\n                    // onOpenChange={toDoFormVisible}\r\n                >\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, 10).map((item: TaskType) => {\r\n                                return (\r\n                                <Item \r\n                                    key={item.id} \r\n                                    // extra={item.time+' '+item.date}\r\n                                    onClick={()=>{onTaskOpen(item)}}\r\n                                >\r\n                                    {item.name}\r\n                                </Item>\r\n                                )\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n\r\n                        <LocaleProvider locale={enUS}>\r\n                            <div className=\"pagination-container\" >\r\n                                <Pagination\r\n                                    className=\"m-2\"\r\n                                    total={user.toDoList ? Math.ceil(user.toDoList?.length / 10) : 0}\r\n                                    current={currentPage}\r\n                                    onChange={onPagination}\r\n                                />\r\n                            </div>\r\n                        </LocaleProvider>\r\n                        </Drawer>\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Schedule\">\r\n                        <ToDoHeaderMobile\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            isReadOnly={true}\r\n                        />\r\n \r\n                        <TasksOnly \r\n                            dateInterval={dateInterval}\r\n                            taskList={taskList}\r\n                            isReadOnly={true}\r\n                        />\r\n\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Related users\"></Accordion.Panel>\r\n                    <Accordion.Panel header=\"Permissions\"></Accordion.Panel>\r\n                </Accordion>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"small\" />\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentUserMobile","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../redux/authReducer'\r\nimport CurrentUserMobile from './CurrentUserMobile'\r\n// import { UserType } from '../../../api/usersAPI'\r\n\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        settings:state.auth.viewSettings,\r\n        appLocation: state.app.location,\r\n        viewSettings: state.auth.viewSettings,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser}) \r\n    (isMobile ? CurrentUserMobile : CurrentUser)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n        setLocation(location)\r\n      }\r\n      props.initializeApp()\r\n    }\r\n  }, [props, location])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n          :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n        }\r\n\r\n        {props.isAuth ?\r\n          <Route exact path={props.appLocation + 'login'}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n          />\r\n          :\r\n          null\r\n        }\r\n\r\n        <Route path={props.appLocation + 'login'}\r\n          render={() => <Login />} />\r\n\r\n        <Route path={props.appLocation + 'toDoList'}\r\n          render={() => <ToDoList />} />\r\n\r\n        <Route path={props.appLocation + 'tasksTree'}\r\n          render={() => <TasksTree />} />\r\n\r\n        <Route path={props.appLocation + 'orders'}\r\n          render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation + 'register'}\r\n          render={() => <Register />} />\r\n\r\n\r\n\r\n        {props.userStatus === 'admin' || props.userStatus === 'superAdmin' ?\r\n          <>\r\n\r\n          <Route path={props.appLocation + 'users/:userId'} component={CurrentUser} />\r\n            {/* render={() => <CurrentUser />} /> */}\r\n\r\n          <Route exact path={props.appLocation + 'users'}\r\n            render={() => <Users />} />\r\n\r\n          </>\r\n          :\r\n          null\r\n        }\r\n\r\n\r\n        <Route path={props.appLocation + '*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth,\r\n  userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params: any = {}\r\n  document.location.search.substr(1).split('&').forEach((pair) => {\r\n    const [key, value] = pair.split('=')\r\n    params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
[{"C:\\OpenServer\\domains\\front1\\src\\index.tsx":"1","C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\front1\\src\\App.tsx":"3","C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts":"4","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts":"5","C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts":"6","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"8","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"9","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoContainer.tsx":"10","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx":"11","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"12","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\UsersContainer.tsx":"13","C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts":"14","C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts":"15","C:\\OpenServer\\domains\\front1\\src\\redux\\usersReducer.ts":"16","C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts":"17","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx":"18","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"19","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx":"20","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoMobile.tsx":"21","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoBrowser.tsx":"22","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx":"23","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\Users.tsx":"24","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"25","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\UsersMobile.tsx":"26","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"27","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts":"28","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts":"29","C:\\OpenServer\\domains\\front1\\src\\api\\usersAPI.ts":"30","C:\\OpenServer\\domains\\front1\\src\\api\\api.ts":"31","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"32","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuContainer.tsx":"33","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"34","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"35","C:\\OpenServer\\domains\\front1\\src\\utils\\Date\\NewDeteByString.ts":"36","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"37","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"38","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"39","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"40","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"41","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"42","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"43","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"44","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"45","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"46","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"47","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"48","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"49","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"50","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"51","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"52","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"53","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx":"54","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"55","C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts":"56","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"57","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"58","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"59","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"60","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"61","C:\\OpenServer\\domains\\front1\\src\\redux\\usersSelector.ts":"62","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx":"63"},{"size":406,"mtime":1613759445162,"results":"64","hashOfConfig":"65"},{"size":440,"mtime":1613120549881,"results":"66","hashOfConfig":"65"},{"size":4412,"mtime":1613759445000,"results":"67","hashOfConfig":"65"},{"size":1346,"mtime":1613593557412,"results":"68","hashOfConfig":"65"},{"size":941,"mtime":1613593557430,"results":"69","hashOfConfig":"65"},{"size":5241,"mtime":1613759445170,"results":"70","hashOfConfig":"65"},{"size":713,"mtime":1613120549831,"results":"71","hashOfConfig":"65"},{"size":750,"mtime":1613120549837,"results":"72","hashOfConfig":"65"},{"size":709,"mtime":1613120549839,"results":"73","hashOfConfig":"65"},{"size":1377,"mtime":1613593557351,"results":"74","hashOfConfig":"65"},{"size":843,"mtime":1613593557034,"results":"75","hashOfConfig":"65"},{"size":3059,"mtime":1613593557119,"results":"76","hashOfConfig":"65"},{"size":920,"mtime":1614110006501,"results":"77","hashOfConfig":"65"},{"size":5502,"mtime":1613759445174,"results":"78","hashOfConfig":"65"},{"size":3042,"mtime":1613759445167,"results":"79","hashOfConfig":"65"},{"size":2320,"mtime":1614110006532,"results":"80","hashOfConfig":"65"},{"size":2394,"mtime":1613759445117,"results":"81","hashOfConfig":"65"},{"size":2311,"mtime":1613759445041,"results":"82","hashOfConfig":"65"},{"size":248,"mtime":1613593557027,"results":"83","hashOfConfig":"65"},{"size":1337,"mtime":1613593557025,"results":"84","hashOfConfig":"65"},{"size":16490,"mtime":1614110006420,"results":"85","hashOfConfig":"65"},{"size":4363,"mtime":1613759445076,"results":"86","hashOfConfig":"65"},{"size":1295,"mtime":1614110006362,"results":"87","hashOfConfig":"65"},{"size":2461,"mtime":1614110006452,"results":"88","hashOfConfig":"65"},{"size":9589,"mtime":1613759445053,"results":"89","hashOfConfig":"65"},{"size":1130,"mtime":1614110006526,"results":"90","hashOfConfig":"65"},{"size":9578,"mtime":1613759445058,"results":"91","hashOfConfig":"65"},{"size":2410,"mtime":1613759445119,"results":"92","hashOfConfig":"65"},{"size":2520,"mtime":1613759445122,"results":"93","hashOfConfig":"65"},{"size":1044,"mtime":1614110006529,"results":"94","hashOfConfig":"65"},{"size":773,"mtime":1613759445115,"results":"95","hashOfConfig":"65"},{"size":1508,"mtime":1613120549838,"results":"96","hashOfConfig":"65"},{"size":944,"mtime":1613593556974,"results":"97","hashOfConfig":"65"},{"size":2784,"mtime":1614112310676,"results":"98","hashOfConfig":"65"},{"size":849,"mtime":1613179240089,"results":"99","hashOfConfig":"65"},{"size":939,"mtime":1613593557439,"results":"100","hashOfConfig":"65"},{"size":1241,"mtime":1613593557043,"results":"101","hashOfConfig":"65"},{"size":4578,"mtime":1613759445049,"results":"102","hashOfConfig":"65"},{"size":1479,"mtime":1613593557038,"results":"103","hashOfConfig":"65"},{"size":4086,"mtime":1614110006376,"results":"104","hashOfConfig":"65"},{"size":2119,"mtime":1614110006409,"results":"105","hashOfConfig":"65"},{"size":1068,"mtime":1614110006414,"results":"106","hashOfConfig":"65"},{"size":1050,"mtime":1614110006406,"results":"107","hashOfConfig":"65"},{"size":2030,"mtime":1613759445184,"results":"108","hashOfConfig":"65"},{"size":2056,"mtime":1613593556962,"results":"109","hashOfConfig":"65"},{"size":10640,"mtime":1614110006368,"results":"110","hashOfConfig":"65"},{"size":4927,"mtime":1613759445071,"results":"111","hashOfConfig":"65"},{"size":7718,"mtime":1614110006536,"results":"112","hashOfConfig":"65"},{"size":4428,"mtime":1614110006355,"results":"113","hashOfConfig":"65"},{"size":1423,"mtime":1614110006383,"results":"114","hashOfConfig":"65"},{"size":3108,"mtime":1614110006417,"results":"115","hashOfConfig":"65"},{"size":4565,"mtime":1614110006412,"results":"116","hashOfConfig":"65"},{"size":4797,"mtime":1614110006402,"results":"117","hashOfConfig":"65"},{"size":1334,"mtime":1613593557021,"results":"118","hashOfConfig":"65"},{"size":3928,"mtime":1614110006380,"results":"119","hashOfConfig":"65"},{"size":318,"mtime":1613120549886,"results":"120","hashOfConfig":"65"},{"size":913,"mtime":1613120549849,"results":"121","hashOfConfig":"65"},{"size":3971,"mtime":1614110006394,"results":"122","hashOfConfig":"65"},{"size":1445,"mtime":1614110006428,"results":"123","hashOfConfig":"65"},{"size":8470,"mtime":1614111327309,"results":"124","hashOfConfig":"65"},{"size":4610,"mtime":1614110006447,"results":"125","hashOfConfig":"65"},{"size":278,"mtime":1613759445178,"results":"126","hashOfConfig":"65"},{"size":9184,"mtime":1614112855077,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"183mcre",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"130"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OpenServer\\domains\\front1\\src\\index.tsx",[],["258","259"],"C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\front1\\src\\App.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\usersReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoMobile.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoBrowser.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\Users.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["260","261"],"import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\n// type SelectOptionType = {\r\n//     name: string,\r\n//     value: number\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["262","263"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = NewTimeByString()\r\n\r\n    type SelectOptionType = {\r\n        name: string,\r\n        value: number\r\n    }\r\n\r\n    type InitialValuesType = {\r\n        selectOptions: Array<SelectOptionType> | null,\r\n        taskTypes: typeof taskTreeTypes,\r\n        task_type: Array<number>,\r\n        name?: string,\r\n        descriptions?: string\r\n        // parent_id?: Array<number>\r\n        parent_id?: number\r\n        time_to_complete?: Date\r\n    }\r\n\r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: [1],\r\n        time_to_complete: initialTimeToComplete,\r\n        // name: 'empty'\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...initialValues, parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...initialValues, parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile drawerData', drawerData)\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={\r\n                        <h4 className=\"w-100 text-center\">Tasks Tree</h4>\r\n                        // drawerData.header === 'Tasks Tree' ?\r\n                        // <h4 className=\"w-100 text-center\">{drawerData.header}</h4>\r\n                        // :\r\n                        // <div>{drawerData.header}</div>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\usersAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\api.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",["264","265","266","267"],"import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                render={FormFielsd as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n                // submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n                // validate={validateEmail}\r\n                // onChange={submitPosible}\r\n                // submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","C:\\OpenServer\\domains\\front1\\src\\redux\\usersSelector.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx",[],{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":54,"column":11,"nodeType":"274","endLine":60,"endColumn":6},{"ruleId":"275","severity":1,"message":"276","line":106,"column":56,"nodeType":"277","messageId":"278","endLine":106,"endColumn":58},{"ruleId":"272","severity":1,"message":"279","line":30,"column":8,"nodeType":"280","endLine":30,"endColumn":24,"suggestions":"281"},{"ruleId":"275","severity":1,"message":"282","line":178,"column":55,"nodeType":"277","messageId":"278","endLine":178,"endColumn":57},{"ruleId":"283","severity":1,"message":"284","line":1,"column":10,"nodeType":"285","messageId":"286","endLine":1,"endColumn":15},{"ruleId":"283","severity":1,"message":"287","line":4,"column":10,"nodeType":"285","messageId":"286","endLine":4,"endColumn":18},{"ruleId":"283","severity":1,"message":"288","line":5,"column":8,"nodeType":"285","messageId":"286","endLine":5,"endColumn":20},{"ruleId":"283","severity":1,"message":"289","line":7,"column":28,"nodeType":"285","messageId":"286","endLine":7,"endColumn":41},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"react-hooks/exhaustive-deps","The 'initialValues' object makes the dependencies of useEffect Hook (at line 70) change on every render. To fix this, wrap the initialization of 'initialValues' in its own useMemo() Hook.","VariableDeclarator","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'initialValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["292"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","@typescript-eslint/no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'UserType' is defined but never used.","'usersReducer' is defined but never used.","'validateEmail' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"293","fix":"294"},"Update the dependencies array to be: [initialValues, props, props.taskList]",{"range":"295","text":"296"},[1107,1123],"[initialValues, props, props.taskList]"]
[{"C:\\OSPanel\\domains\\Front3\\src\\index.tsx":"1","C:\\OSPanel\\domains\\Front3\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\Front3\\src\\App.tsx":"3","C:\\OSPanel\\domains\\Front3\\src\\redux\\appReducer.ts":"4","C:\\OSPanel\\domains\\Front3\\src\\redux\\store.ts":"5","C:\\OSPanel\\domains\\Front3\\src\\redux\\authReducer.ts":"6","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoContainer.tsx":"7","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginContainer.tsx":"8","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\HeaderContainer.tsx":"9","C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\OrdersContainer.tsx":"10","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"11","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterContainer.tsx":"12","C:\\OSPanel\\domains\\Front3\\src\\redux\\taskReducer.ts":"13","C:\\OSPanel\\domains\\Front3\\src\\redux\\TaskListReducer.ts":"14","C:\\OSPanel\\domains\\Front3\\src\\api\\authAPI.ts":"15","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoMobile.tsx":"16","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoBrowser.tsx":"17","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\Login.tsx":"18","C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\Orders.tsx":"19","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"20","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"21","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\Register.tsx":"22","C:\\OSPanel\\domains\\Front3\\src\\api\\taskListAPI.ts":"23","C:\\OSPanel\\domains\\Front3\\src\\api\\api.ts":"24","C:\\OSPanel\\domains\\Front3\\src\\api\\taskApi.ts":"25","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginForm.tsx":"26","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterForm.tsx":"27","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"28","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"29","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"30","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"31","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"32","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuMobile.tsx":"33","C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\ValidateFields.ts":"34","C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\CreateAntField.tsx":"35","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"36","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuBrowser.tsx":"37","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"38","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"39","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuPopover.tsx":"40","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScale.tsx":"41","C:\\OSPanel\\domains\\Front3\\src\\utils\\array-helpers.ts":"42","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"43","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"44","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"45","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"46","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\Header.tsx":"47","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuContainer.tsx":"48","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"49","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"50","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"51","C:\\OSPanel\\domains\\Front3\\src\\utils\\Date\\NewDeteByString.ts":"52","C:\\OSPanel\\domains\\Front3\\src\\Types\\types.ts":"53","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"54","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\Users.tsx":"55","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\UsersContainer.tsx":"56","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\UsersMobile.tsx":"57","C:\\OSPanel\\domains\\Front3\\src\\redux\\UsersReducer.ts":"58","C:\\OSPanel\\domains\\Front3\\src\\api\\usersAPI.ts":"59","C:\\OSPanel\\domains\\Front3\\src\\redux\\usersReducer.ts":"60","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"61","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"62","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"63"},{"size":471,"mtime":1613296306227,"results":"64","hashOfConfig":"65"},{"size":440,"mtime":1613296306233,"results":"66","hashOfConfig":"65"},{"size":4447,"mtime":1613650510461,"results":"67","hashOfConfig":"65"},{"size":1346,"mtime":1613464808263,"results":"68","hashOfConfig":"65"},{"size":941,"mtime":1613567338247,"results":"69","hashOfConfig":"65"},{"size":5490,"mtime":1613483973237,"results":"70","hashOfConfig":"65"},{"size":1377,"mtime":1613465400095,"results":"71","hashOfConfig":"65"},{"size":750,"mtime":1613296306198,"results":"72","hashOfConfig":"65"},{"size":713,"mtime":1613296306193,"results":"73","hashOfConfig":"65"},{"size":709,"mtime":1613296306200,"results":"74","hashOfConfig":"65"},{"size":3059,"mtime":1613475117154,"results":"75","hashOfConfig":"65"},{"size":843,"mtime":1613483985421,"results":"76","hashOfConfig":"65"},{"size":5652,"mtime":1613296306232,"results":"77","hashOfConfig":"65"},{"size":3075,"mtime":1613475042842,"results":"78","hashOfConfig":"65"},{"size":2766,"mtime":1613486521356,"results":"79","hashOfConfig":"65"},{"size":14145,"mtime":1613473014326,"results":"80","hashOfConfig":"65"},{"size":4339,"mtime":1613558017359,"results":"81","hashOfConfig":"65"},{"size":1337,"mtime":1613560172969,"results":"82","hashOfConfig":"65"},{"size":248,"mtime":1613560191734,"results":"83","hashOfConfig":"65"},{"size":9359,"mtime":1613561366082,"results":"84","hashOfConfig":"65"},{"size":8956,"mtime":1613492858140,"results":"85","hashOfConfig":"65"},{"size":1319,"mtime":1613560246044,"results":"86","hashOfConfig":"65"},{"size":3256,"mtime":1613493321830,"results":"87","hashOfConfig":"65"},{"size":704,"mtime":1613566991977,"results":"88","hashOfConfig":"65"},{"size":3169,"mtime":1613556942365,"results":"89","hashOfConfig":"65"},{"size":1508,"mtime":1613296306199,"results":"90","hashOfConfig":"65"},{"size":2110,"mtime":1613296306202,"results":"91","hashOfConfig":"65"},{"size":1479,"mtime":1613473329590,"results":"92","hashOfConfig":"65"},{"size":1241,"mtime":1613475104471,"results":"93","hashOfConfig":"65"},{"size":2174,"mtime":1613562484407,"results":"94","hashOfConfig":"65"},{"size":1049,"mtime":1613473181988,"results":"95","hashOfConfig":"65"},{"size":1181,"mtime":1613296306219,"results":"96","hashOfConfig":"65"},{"size":4430,"mtime":1613560096988,"results":"97","hashOfConfig":"65"},{"size":2373,"mtime":1613658577154,"results":"98","hashOfConfig":"65"},{"size":7501,"mtime":1613660487293,"results":"99","hashOfConfig":"65"},{"size":10834,"mtime":1613560706446,"results":"100","hashOfConfig":"65"},{"size":2056,"mtime":1613485271270,"results":"101","hashOfConfig":"65"},{"size":2999,"mtime":1613470419886,"results":"102","hashOfConfig":"65"},{"size":4481,"mtime":1613296306218,"results":"103","hashOfConfig":"65"},{"size":1334,"mtime":1613560124723,"results":"104","hashOfConfig":"65"},{"size":4641,"mtime":1613558797726,"results":"105","hashOfConfig":"65"},{"size":318,"mtime":1613296306237,"results":"106","hashOfConfig":"65"},{"size":913,"mtime":1613296306212,"results":"107","hashOfConfig":"65"},{"size":3870,"mtime":1613647509702,"results":"108","hashOfConfig":"65"},{"size":849,"mtime":1613296306215,"results":"109","hashOfConfig":"65"},{"size":5098,"mtime":1613551159329,"results":"110","hashOfConfig":"65"},{"size":2344,"mtime":1613564230676,"results":"111","hashOfConfig":"65"},{"size":944,"mtime":1613300106274,"results":"112","hashOfConfig":"65"},{"size":4121,"mtime":1613656943247,"results":"113","hashOfConfig":"65"},{"size":1462,"mtime":1613473452135,"results":"114","hashOfConfig":"65"},{"size":4005,"mtime":1613464410159,"results":"115","hashOfConfig":"65"},{"size":939,"mtime":1613469461211,"results":"116","hashOfConfig":"65"},{"size":1729,"mtime":1613487596097,"results":"117","hashOfConfig":"65"},{"size":5411,"mtime":1613493366342,"results":"118","hashOfConfig":"65"},{"size":2390,"mtime":1613649290237,"results":"119","hashOfConfig":"65"},{"size":802,"mtime":1613650392066,"results":"120","hashOfConfig":"65"},{"size":326,"mtime":1613567486981,"results":"121","hashOfConfig":"65"},{"size":1360,"mtime":1613567237180,"results":"122","hashOfConfig":"65"},{"size":1657,"mtime":1613663504081,"results":"123","hashOfConfig":"65"},{"size":1494,"mtime":1613662603038,"results":"124","hashOfConfig":"65"},{"size":2169,"mtime":1613661670304,"results":"125","hashOfConfig":"65"},{"size":980,"mtime":1613661647509,"results":"126","hashOfConfig":"65"},{"size":4605,"mtime":1613663276294,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"1to4j46",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"130"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"130"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"130"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"130"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"130"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"130"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\OSPanel\\domains\\Front3\\src\\index.tsx",[],["262","263"],"C:\\OSPanel\\domains\\Front3\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\App.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\authReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\authAPI.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoMobile.tsx",["264","265"],"import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formPropsCopy: NewTaskDataType = { \r\n            ...values, \r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n        // let date = NewTimeByString(value.date)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => props.onComplete(props.element),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map( (item: TaskType) => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map( (task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoBrowser.tsx",["266"],"import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        console.log('name: ', initialFormValues.name)\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        console.log('onTaskEdit')\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\Login.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\Orders.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["267","268"],"import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    const getSelectOptions = (): Array<SelectOptionType> | null => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    \r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList, initialValues, props])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                if (item.id === values) {\r\n                    return item\r\n                }\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        // setInitialFormValues({ ...initialValues })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        console.log(formProps)\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={initialValues}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment()\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            render={RunTaskFormCall as any}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["269","270"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = NewTimeByString()\r\n\r\n    type SelectOptionType = {\r\n        name: string,\r\n        value: number\r\n    }\r\n\r\n    type InitialValuesType = {\r\n        selectOptions: Array<SelectOptionType> | null,\r\n        taskTypes: typeof taskTreeTypes,\r\n        task_type: Array<number>,\r\n        name?: string,\r\n        descriptions?: string\r\n        // parent_id?: Array<number>\r\n        parent_id?: number\r\n        time_to_complete?: Date\r\n    }\r\n\r\n    const initialValues: InitialValuesType = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: [1],\r\n        time_to_complete: initialTimeToComplete,\r\n        // name: 'empty'\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.taskTypes[0].value?.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            setInitialFormValues({ ...initialValues, parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            setInitialFormValues({...initialValues, parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile drawerData', drawerData)\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    // className=\"sticky-top bg-white\"\r\n                    title={\r\n                        <h4 className=\"w-100 text-center\">Tasks Tree</h4>\r\n                        // drawerData.header === 'Tasks Tree' ?\r\n                        // <h4 className=\"w-100 text-center\">{drawerData.header}</h4>\r\n                        // :\r\n                        // <div>{drawerData.header}</div>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm as any}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\Register.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\CreateAntField.tsx",["271"],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScale.tsx",["272"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    // console.log('view settings: ',props.settings.ToDo)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\">\r\n                                    <TaskItem element={element} onEdit={onEdit}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OSPanel\\domains\\Front3\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",["273"],"import React, { ReactNode, useState } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    // console.log(viewSettings)\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse)\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        // console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    // console.log('settings: ', settings)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                // initialValues={settingasInstanse}\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n                enableReinitialize={true}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\Header.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Types\\types.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\Users.tsx",["274","275","276","277"],"import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList] )\r\n\r\n    let { url } = useRouteMatch();\r\n\r\n    console.log(props)\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <li>getUserList</li>\r\n            <li>show User List</li>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{console.log('onClick')}}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\UsersReducer.ts",["278","279","280","281","282"],"C:\\OSPanel\\domains\\Front3\\src\\api\\usersAPI.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\usersReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",["283"],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",["284","285","286"],{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","replacedBy":"290"},{"ruleId":"291","severity":1,"message":"292","line":47,"column":8,"nodeType":"293","endLine":47,"endColumn":28,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":293,"column":65,"nodeType":"297","messageId":"298","endLine":293,"endColumn":67},{"ruleId":"291","severity":1,"message":"292","line":48,"column":8,"nodeType":"293","endLine":48,"endColumn":24,"suggestions":"299"},{"ruleId":"291","severity":1,"message":"300","line":54,"column":11,"nodeType":"301","endLine":60,"endColumn":6},{"ruleId":"295","severity":1,"message":"302","line":106,"column":56,"nodeType":"297","messageId":"298","endLine":106,"endColumn":58},{"ruleId":"291","severity":1,"message":"303","line":30,"column":8,"nodeType":"293","endLine":30,"endColumn":24,"suggestions":"304"},{"ruleId":"295","severity":1,"message":"296","line":176,"column":55,"nodeType":"297","messageId":"298","endLine":176,"endColumn":57},{"ruleId":"291","severity":1,"message":"305","line":161,"column":8,"nodeType":"293","endLine":161,"endColumn":21,"suggestions":"306"},{"ruleId":"291","severity":1,"message":"307","line":31,"column":8,"nodeType":"293","endLine":31,"endColumn":28,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":49,"column":22,"nodeType":"311","messageId":"312","endLine":49,"endColumn":33},{"ruleId":"309","severity":1,"message":"313","line":6,"column":10,"nodeType":"311","messageId":"312","endLine":6,"endColumn":28},{"ruleId":"309","severity":1,"message":"314","line":6,"column":31,"nodeType":"311","messageId":"312","endLine":6,"endColumn":45},{"ruleId":"309","severity":1,"message":"315","line":6,"column":47,"nodeType":"311","messageId":"312","endLine":6,"endColumn":59},{"ruleId":"291","severity":1,"message":"292","line":14,"column":8,"nodeType":"293","endLine":14,"endColumn":25,"suggestions":"316"},{"ruleId":"309","severity":1,"message":"317","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":17},{"ruleId":"309","severity":1,"message":"318","line":2,"column":19,"nodeType":"311","messageId":"312","endLine":2,"endColumn":31},{"ruleId":"309","severity":1,"message":"319","line":4,"column":10,"nodeType":"311","messageId":"312","endLine":4,"endColumn":25},{"ruleId":"309","severity":1,"message":"320","line":4,"column":27,"nodeType":"311","messageId":"312","endLine":4,"endColumn":35},{"ruleId":"309","severity":1,"message":"321","line":6,"column":8,"nodeType":"311","messageId":"312","endLine":6,"endColumn":14},{"ruleId":"291","severity":1,"message":"292","line":15,"column":8,"nodeType":"293","endLine":15,"endColumn":25,"suggestions":"322"},{"ruleId":"309","severity":1,"message":"323","line":1,"column":10,"nodeType":"311","messageId":"312","endLine":1,"endColumn":15},{"ruleId":"309","severity":1,"message":"324","line":4,"column":10,"nodeType":"311","messageId":"312","endLine":4,"endColumn":18},{"ruleId":"309","severity":1,"message":"325","line":5,"column":8,"nodeType":"311","messageId":"312","endLine":5,"endColumn":20},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["328"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["329"],"The 'initialValues' object makes the dependencies of useEffect Hook (at line 70) change on every render. To fix this, wrap the initialization of 'initialValues' in its own useMemo() Hook.","VariableDeclarator","Array.prototype.filter() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'initialValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["330"],"React Hook useEffect has a missing dependency: 'props.type'. Either include it or remove the dependency array.",["331"],"React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["332"],"@typescript-eslint/no-unused-vars","'setSettings' is assigned a value but never used.","Identifier","unusedVar","'PlusCircleOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'EditOutlined' is defined but never used.",["333"],"'taskAPI' is defined but never used.","'TaskListType' is defined but never used.","'NewTaskDataType' is defined but never used.","'TaskType' is defined but never used.","'moment' is defined but never used.",["334"],"'Input' is defined but never used.","'UserType' is defined but never used.","'usersReducer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"345","fix":"347"},"Update the dependencies array to be: [props, props.dateInterval]",{"range":"348","text":"349"},"Update the dependencies array to be: [props, props.taskList]",{"range":"350","text":"351"},"Update the dependencies array to be: [initialValues, props, props.taskList]",{"range":"352","text":"353"},"Update the dependencies array to be: [props.type, props.value]",{"range":"354","text":"355"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"356","text":"357"},"Update the dependencies array to be: [props, props.usersList]",{"range":"358","text":"359"},{"range":"360","text":"359"},[1536,1556],"[props, props.dateInterval]",[1362,1378],"[props, props.taskList]",[1093,1109],"[initialValues, props, props.taskList]",[5370,5383],"[props.type, props.value]",[1338,1358],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[537,554],"[props, props.usersList]",[533,550]]
[{"C:\\OSPanel\\domains\\Front3\\src\\index.tsx":"1","C:\\OSPanel\\domains\\Front3\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\Front3\\src\\App.tsx":"3","C:\\OSPanel\\domains\\Front3\\src\\redux\\appReducer.ts":"4","C:\\OSPanel\\domains\\Front3\\src\\redux\\store.ts":"5","C:\\OSPanel\\domains\\Front3\\src\\redux\\authReducer.ts":"6","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoContainer.tsx":"7","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginContainer.tsx":"8","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\HeaderContainer.tsx":"9","C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\OrdersContainer.tsx":"10","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"11","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterContainer.tsx":"12","C:\\OSPanel\\domains\\Front3\\src\\redux\\taskReducer.ts":"13","C:\\OSPanel\\domains\\Front3\\src\\redux\\TaskListReducer.ts":"14","C:\\OSPanel\\domains\\Front3\\src\\api\\authAPI.ts":"15","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoMobile.tsx":"16","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoBrowser.tsx":"17","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\Login.tsx":"18","C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\Orders.tsx":"19","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"20","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"21","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\Register.tsx":"22","C:\\OSPanel\\domains\\Front3\\src\\api\\taskListAPI.ts":"23","C:\\OSPanel\\domains\\Front3\\src\\api\\api.ts":"24","C:\\OSPanel\\domains\\Front3\\src\\api\\taskApi.ts":"25","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeItem.tsx":"26","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginForm.tsx":"27","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterForm.tsx":"28","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"29","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx":"30","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"31","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"32","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"33","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"34","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuMobile.tsx":"35","C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\ValidateFields.ts":"36","C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\CreateAntField.tsx":"37","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"38","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuBrowser.tsx":"39","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"40","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"41","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuPopover.tsx":"42","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScale.tsx":"43","C:\\OSPanel\\domains\\Front3\\src\\utils\\array-helpers.ts":"44","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"45","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"46","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"47","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"48","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\Header.tsx":"49","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuContainer.tsx":"50"},{"size":471,"mtime":1613296306227,"results":"51","hashOfConfig":"52"},{"size":440,"mtime":1613296306233,"results":"53","hashOfConfig":"52"},{"size":3788,"mtime":1613299242913,"results":"54","hashOfConfig":"52"},{"size":1600,"mtime":1613296306229,"results":"55","hashOfConfig":"52"},{"size":925,"mtime":1613296306231,"results":"56","hashOfConfig":"52"},{"size":5005,"mtime":1613296306230,"results":"57","hashOfConfig":"52"},{"size":1387,"mtime":1613296306216,"results":"58","hashOfConfig":"52"},{"size":750,"mtime":1613296306198,"results":"59","hashOfConfig":"52"},{"size":713,"mtime":1613296306193,"results":"60","hashOfConfig":"52"},{"size":709,"mtime":1613296306200,"results":"61","hashOfConfig":"52"},{"size":3083,"mtime":1613296306208,"results":"62","hashOfConfig":"52"},{"size":776,"mtime":1613296306202,"results":"63","hashOfConfig":"52"},{"size":5652,"mtime":1613296306232,"results":"64","hashOfConfig":"52"},{"size":4224,"mtime":1613296306229,"results":"65","hashOfConfig":"52"},{"size":2877,"mtime":1613296306225,"results":"66","hashOfConfig":"52"},{"size":14418,"mtime":1613296306221,"results":"67","hashOfConfig":"52"},{"size":3857,"mtime":1613296306215,"results":"68","hashOfConfig":"52"},{"size":1644,"mtime":1613296306197,"results":"69","hashOfConfig":"52"},{"size":308,"mtime":1613296306199,"results":"70","hashOfConfig":"52"},{"size":13919,"mtime":1613296306208,"results":"71","hashOfConfig":"52"},{"size":13411,"mtime":1613296306210,"results":"72","hashOfConfig":"52"},{"size":1317,"mtime":1613296306201,"results":"73","hashOfConfig":"52"},{"size":3154,"mtime":1613296306226,"results":"74","hashOfConfig":"52"},{"size":497,"mtime":1613296306224,"results":"75","hashOfConfig":"52"},{"size":3126,"mtime":1613296306225,"results":"76","hashOfConfig":"52"},{"size":5131,"mtime":1613300163034,"results":"77","hashOfConfig":"52"},{"size":1508,"mtime":1613296306199,"results":"78","hashOfConfig":"52"},{"size":2110,"mtime":1613296306202,"results":"79","hashOfConfig":"52"},{"size":1632,"mtime":1613296306204,"results":"80","hashOfConfig":"52"},{"size":3555,"mtime":1613296306203,"results":"81","hashOfConfig":"52"},{"size":1400,"mtime":1613296306206,"results":"82","hashOfConfig":"52"},{"size":1811,"mtime":1613296306217,"results":"83","hashOfConfig":"52"},{"size":1005,"mtime":1613296306213,"results":"84","hashOfConfig":"52"},{"size":1181,"mtime":1613296306219,"results":"85","hashOfConfig":"52"},{"size":4411,"mtime":1613299986319,"results":"86","hashOfConfig":"52"},{"size":1096,"mtime":1613296306236,"results":"87","hashOfConfig":"52"},{"size":8142,"mtime":1613296306235,"results":"88","hashOfConfig":"52"},{"size":10847,"mtime":1613296306206,"results":"89","hashOfConfig":"52"},{"size":1903,"mtime":1613300086182,"results":"90","hashOfConfig":"52"},{"size":2999,"mtime":1613296306220,"results":"91","hashOfConfig":"52"},{"size":4481,"mtime":1613296306218,"results":"92","hashOfConfig":"52"},{"size":1334,"mtime":1613296306196,"results":"93","hashOfConfig":"52"},{"size":4668,"mtime":1613296306213,"results":"94","hashOfConfig":"52"},{"size":318,"mtime":1613296306237,"results":"95","hashOfConfig":"52"},{"size":913,"mtime":1613296306212,"results":"96","hashOfConfig":"52"},{"size":3875,"mtime":1613296306211,"results":"97","hashOfConfig":"52"},{"size":849,"mtime":1613296306215,"results":"98","hashOfConfig":"52"},{"size":4211,"mtime":1613296306214,"results":"99","hashOfConfig":"52"},{"size":1796,"mtime":1613299911785,"results":"100","hashOfConfig":"52"},{"size":944,"mtime":1613300106274,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1to4j46",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OSPanel\\domains\\Front3\\src\\index.tsx",[],["222","223"],"C:\\OSPanel\\domains\\Front3\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\App.tsx",["224","225"],"import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      props.initializeApp()\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n          :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n        }\r\n\r\n        {props.isAuth ?\r\n          <Route exact path={props.appLocation + 'login'}\r\n            render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n          />\r\n          :\r\n          null\r\n        }\r\n\r\n        <Route path={props.appLocation + 'login'}\r\n          render={() => <Login />} />\r\n\r\n        <Route path={props.appLocation + 'toDoList'}\r\n          render={() => <ToDoList />} />\r\n\r\n        <Route path={props.appLocation + 'tasksTree'}\r\n          render={() => <TasksTree />} />\r\n\r\n        <Route path={props.appLocation + 'orders'}\r\n          render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation + 'register'}\r\n          render={() => <Register />} />\r\n\r\n        <Route path={props.appLocation + '*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params: any = {}\r\n  document.location.search.substr(1).split('&').forEach((pair) => {\r\n    const [key, value] = pair.split('=')\r\n    params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","C:\\OSPanel\\domains\\Front3\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\authReducer.ts",["226"],"import { act } from \"@testing-library/react\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            //console.log(action)\r\n            let viewSettings = {...state.viewSettings}\r\n            viewSettings[action.settingType] = action.settings\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                console.log(response.data.message)\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        console.log('register', response)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            console.log(response.data)\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoContainer.tsx",["227"],"import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\authAPI.ts",["228","229"],"import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        console.log(remember_token)\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            console.log('ME: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        console.log(data)\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('register: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoMobile.tsx",["230","231","232","233","234"],"import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    type FormPropsType = {\r\n        \r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formPropsCopy: NewTaskDataType = { \r\n            ...values, \r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        if (task.isCompleted) {\r\n            const updatedTask: NewTaskDataType = {\r\n                ...task as NewTaskDataType,\r\n                isCompleted: !task.isCompleted\r\n            }\r\n            props.updateTask(updatedTask, task.id)\r\n        }\r\n    }\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm as any}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n        let time = new Date()\r\n        time.setHours(parseInt(splitTime[0]))\r\n        time.setMinutes(parseInt(splitTime[1]))\r\n        time.setSeconds(parseInt(splitTime[2]))\r\n        time.setMilliseconds(0)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => props.onComplete(props.element),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        >\r\n\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string)=>void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: ()=>void,\r\n    onComplete: (values: TaskType)=>void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map(item => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map( (task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            }\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoBrowser.tsx",["235","236","237"],"import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null \r\n}\r\n\r\nconst initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.getTaskList])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"'+value.name+'\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours( Number(splitTime[0]) ).minutes( Number(splitTime[1]) ).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n        \r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues({...initialValues})\r\n        setDrawerData({...initialDrewerData})\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType) => {\r\n        let formProps: NewTaskDataType = { \r\n                ...values,\r\n                time: values.time.format('HH:mm:ss'),\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                user_id: props.userId,\r\n            }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={ <ToDoHeaderContainer \r\n                        showDrawer={showDrawer} \r\n                        showModal={showModal}\r\n                    />}\r\n            bordered={false}\r\n        >\r\n            <TimeScale onEdit={onTaskEdit}/>\r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm as any}\r\n                    enableReinitialize={true}\r\n                />\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\Login.tsx",["238","239","240","241","242"],"import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\OSPanel\\domains\\Front3\\src\\Components\\Orders\\Orders.tsx",["243"],"import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["244","245","246","247","248","249","250"],"import { Button, Card, Drawer, List, Checkbox, Collapse, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, useFormikContext  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { TaskListType, TaskType } from '../../Types/types'\r\n\r\n\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    // const { submitForm } = useFormikContext();\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    const runTaslSubmit = (values: any) => {\r\n        console.log('runTaslSubmit', values.time.format('HH:mm:00'))\r\n        console.log(runData)\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo = {\r\n                name: 'Call to '+data.lead_name,\r\n                descriptions: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId\r\n            }\r\n            console.log(newToDo)\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n        \r\n        \r\n        // props.createNewToDo()\r\n    }\r\n    const runTaslOk = (values: any) => {\r\n\r\n        // submitForm()\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: any) => {\r\n        setRunTaskVisible(true)\r\n        console.log('onRunTask', values)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                if (item.id === values) {\r\n                    return item\r\n                }\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues({ ...initialValues })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={initialValues}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaslOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        {/* <RunTaskForm handleSubmit={runTaslSubmit} handleReset={(v: any)=>{}}/> */}\r\n                        <Formik\r\n                            initialValues={{}}\r\n                            onSubmit={runTaslSubmit}\r\n                            render={RunTaskFormCall}\r\n                            enableReinitialize={true}\r\n                        />\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    selectedTasks: Array<number>\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    // let display: string = 'none'\r\n\r\n    // const changeDisplat = (key: any) => {\r\n    //     console.log(key);\r\n    //     display = \"block\"\r\n    //   }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n\r\n\r\n        let taskTreeItems: Array<any> = []\r\n        for (let index = 0; index < taskList.length; index++) {\r\n            const item = taskList[index];\r\n            if (item.parent_id === null) {\r\n                taskTreeItems.push(\r\n                    <>\r\n                        <div className=\"py-2\"><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange} /></div>\r\n                        <div className=\"w-100 float-left\" key={item.id}>\r\n                            <div className=\"ml-3 float-left\">\r\n\r\n                                {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <a data-toggle=\"collapse\" aria-controls={item.id + 'collapseExample'} >{item.name}</a>}\r\n\r\n                            </div>\r\n                            <div className=\"ml-3 float-right\">\r\n                                {item.time_to_complete}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex flex-row\">\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { onEdit(item) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                danger\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { deleteTask(item.id) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n                taskTreeItems.push(\r\n                    <>\r\n                        <div className=\"collapse\" id={item.id + 'collapseExample'}>\r\n                            <div className=\"card card-body\">\r\n                                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n\r\n        }\r\n        return taskTreeItems\r\n\r\n    } else {\r\n        return []\r\n    }\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["251","252","253","254","255","256","257","258","259","260"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        //console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            //console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (Array.isArray(formPropsCopy.parent_id)) {\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        //console.log('taskId: ', drawerData.taskId)\r\n        if (!drawerData.taskId) {\r\n            //console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            //console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            //console.log('sub')\r\n            //console.log('initialValues', initialValues)\r\n            setInitialFormValues({ ...initialValues, parent_id: [Number(props.selectedTasks[props.selectedTasks.length - 1])] })\r\n        } else {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    //console.log('TasksTreeMobile props: ', props)\r\n    //console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n\r\n                </Card.Header>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n\r\n\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\n// const getTaskTreeItems = (\r\n//     taskList: Array<any>,\r\n//     deleteTaskList: (taskId: number) => void,\r\n//     showDrawer: () => void,\r\n//     setDrawerData: (drawerData: any) => void,\r\n//     initialFormValues: any,\r\n//     setInitialFormValues: (initialFormValues: any) => void\r\n// ) => {\r\n//     const onEdit = (task: any) => {\r\n//         //console.log(task)\r\n\r\n//         setDrawerData({\r\n//             header: 'Edit: \"' + task.name + '\"',\r\n//             taskId: task.id\r\n//         })\r\n\r\n//         let day = new Date()\r\n//         if (task.time_to_complete !== null) {\r\n//             const splitTime = task.time_to_complete.split(/:/)\r\n//             day.setHours(parseInt(splitTime[0]))\r\n//             day.setMinutes(parseInt(splitTime[1]))\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         } else {\r\n//             day.setHours(0)\r\n//             day.setMinutes(0)\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         }\r\n\r\n//         setInitialFormValues(\r\n//             {\r\n//                 ...initialFormValues,\r\n//                 // new: false,\r\n//                 name: task.name,\r\n//                 time_to_complete: day,\r\n//                 descriptions: task.descriptions,\r\n//                 parent_id: [task.parent_id],\r\n//                 task_type: [Number(task.task_type)]\r\n//             }\r\n//         )\r\n\r\n//         showDrawer()\r\n//     }\r\n\r\n//     const onItemOpen = (itemId: number) => {\r\n//         //console.log(itemId, 'is open')\r\n//         // const dispatch = useDispatch()\r\n//         // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n//     }\r\n\r\n//     //console.log(taskList)\r\n\r\n//     if (taskList && taskList.length > 0) {\r\n//         return taskList.map((item) => {\r\n//             //console.log('!!!!!!!')\r\n//             return (\r\n//                 <SwipeAction\r\n//                     style={{ backgroundColor: 'gray' }}\r\n//                     autoClose\r\n//                     right={[\r\n//                         {\r\n//                             text: 'Cancel',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel') \r\n//                             },\r\n//                             style: { backgroundColor: '#ddd', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Delete',\r\n//                             onPress: () => deleteTaskList(item.id),\r\n//                             style: { backgroundColor: '#F4333C', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                     left={[\r\n//                         {\r\n//                             text: 'Edit',\r\n//                             onPress: () => { onEdit(item) },\r\n//                             style: { backgroundColor: '#108ee9', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Execute',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel')\r\n//                             },\r\n//                             style: { backgroundColor: 'green', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                 // onOpen={() => //console.log('global open')}\r\n//                 // onClose={() => //console.log('global close')}\r\n//                 >\r\n//                     <Item\r\n//                         // className=\"my-3\"\r\n//                         onClick={() => { onItemOpen(item.id) }}\r\n//                         arrow=\"horizontal\"\r\n//                         key={item.id}\r\n//                     >\r\n//                         {item.name}\r\n//                     </Item>\r\n\r\n//                 </SwipeAction>\r\n//             )\r\n//         })\r\n//     } else {\r\n//         return (\r\n//             <Empty />\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\Register.tsx",["261","262","263","264"],"import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\OSPanel\\domains\\Front3\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeItem.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",["265","266","267","268","269","270","271"],"import { Button } from 'antd'\r\nimport { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport ButtonVsIcon from '../../../utils/components/ButtonVsIcon'\r\nimport { AntDatePicker, AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",["272","273","274","275"],"import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\n// import TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    // backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",["276","277","278"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuMobile.tsx",["279"],"C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\utils\\Formik\\CreateAntField.tsx",["280","281"],"import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Switch,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        //console.log('value: ', value)\r\n        //console.log('field: ', field)\r\n        //console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     //console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     //console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        //console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\n// export const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(Switch)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'task_type') {\r\n            //console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        //console.log('onPickerChange: ',defaultValue)\r\n        setValue(value)\r\n    }\r\n\r\n    // const onOk = (value:any) => {\r\n    //     //console.log('onOk; ', value)\r\n    //     setValue(value)\r\n    // }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    // if (props.type === 'select' && props.label === 'task Types') {\r\n    //     //console.log('render: ',props.value)\r\n    // }\r\n\r\n    const mode = props.type\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={mode}\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                // autoHeight\r\n                // autoHeight ={props.type === 'textarea' ? true : false}\r\n                // {props && props.type ==='textarea' ? 'autoHeight' : null}\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",["282","283","284","285"],"import React, { useState } from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined, CaretRightOutlined  } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    // item: TaskListType,\r\n    item: any\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    initialValues: any,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log('onAddSubtask to: ', taskId)\r\n        props.setInitialFormValues({})\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: any) => {\r\n        console.log('onEdit values: ',values)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime)).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n        \r\n        props.setInitialFormValues({\r\n                ...props.initialFormValues,\r\n                ...JSON.parse(values.data), \r\n                name: values.name,\r\n                time_to_complete: day,\r\n                descriptions: values.descriptions,\r\n                parent_id: values.parent_id,\r\n                task_type: Number(values.task_type)\r\n            })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('onStatusChange', Number.parseInt(e.target.id))\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        console.log('deleteTask: ', taskId)\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    // console.log(props.item)\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTaslList: any\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    console.log(props.childsTaslList)\r\n    // let vals = Array.from( props.childsTaslList.values() )\r\n    // console.log(vals)\r\n    return (\r\n        <>\r\n            { props.childsTaslList.map((item: any) => {\r\n                // console.log(props.childsTaslList.get(item.id))\r\n            {/* { props.childsTaslList .map((item: TaskListType) => { */}\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                        onRunTask={props.onRunTask}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: any\r\n    item: any,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n    // console.log(props)\r\n    // console.log(isLast)\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTaslList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n    const onStatusChange = (e: any) => {\r\n        const values = { ...props.item, isCompleted: e.target.checked }\r\n        props.onEdit(values)\r\n    }\r\n\r\n    // console.log(props.item.name,' checked: ', props.item.isCompleted)\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {props.item.isCompleted ? <span className=\"text-black-50\">{props.item.name}</span> : <a data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</a>}\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n    onRunTask: (values:any)=>void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n            {props.item.task_type > 1 ?\r\n                <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onRunTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <CaretRightOutlined  className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            :\r\n            null\r\n            }\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: any, item: any ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n\r\n    // let childs = new Map()\r\n    // \r\n    // for (let pair of taskList.entries()) {\r\n    //     const elem = pair\r\n    //     if (elem.parent_id === item.id) {\r\n    //         childs.set(pair[0], pair)\r\n    //     }\r\n    // }\r\n    // return childs\r\n}","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuPopover.tsx",["286"],"import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        //console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TimeScale.tsx",["287"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    //console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OSPanel\\domains\\Front3\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\Front3\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",["288","289","290","291","292","293","294"],"import React, { ReactNode, useState } from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\n\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst maxTime = new Date()\r\nmaxTime.setHours(23)\r\nmaxTime.setMinutes(59)\r\nmaxTime.setSeconds(0)\r\nmaxTime.setMilliseconds(0)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: zeroTime,\r\n        timeEnd: maxTime,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? props.viewSettings : settingasInstanse)\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settingasInstanse}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm as any}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\Header.tsx",["295","296"],"C:\\OSPanel\\domains\\Front3\\src\\Components\\Header\\MenuContainer.tsx",[],{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","severity":1,"message":"302","line":29,"column":20,"nodeType":"303","messageId":"304","endLine":29,"endColumn":31},{"ruleId":"305","severity":1,"message":"306","line":44,"column":6,"nodeType":"307","endLine":44,"endColumn":25,"suggestions":"308"},{"ruleId":"301","severity":1,"message":"309","line":1,"column":10,"nodeType":"303","messageId":"304","endLine":1,"endColumn":13},{"ruleId":"301","severity":1,"message":"310","line":7,"column":27,"nodeType":"303","messageId":"304","endLine":7,"endColumn":35},{"ruleId":"301","severity":1,"message":"311","line":1,"column":19,"nodeType":"303","messageId":"304","endLine":1,"endColumn":34},{"ruleId":"301","severity":1,"message":"312","line":3,"column":6,"nodeType":"303","messageId":"304","endLine":3,"endColumn":24},{"ruleId":"305","severity":1,"message":"313","line":46,"column":8,"nodeType":"307","endLine":46,"endColumn":24,"suggestions":"314"},{"ruleId":"305","severity":1,"message":"313","line":50,"column":8,"nodeType":"307","endLine":50,"endColumn":28,"suggestions":"315"},{"ruleId":"301","severity":1,"message":"316","line":85,"column":10,"nodeType":"303","messageId":"304","endLine":85,"endColumn":23},{"ruleId":"317","severity":1,"message":"318","line":306,"column":52,"nodeType":"319","messageId":"320","endLine":306,"endColumn":54},{"ruleId":"317","severity":1,"message":"318","line":373,"column":64,"nodeType":"319","messageId":"320","endLine":373,"endColumn":66},{"ruleId":"301","severity":1,"message":"321","line":44,"column":12,"nodeType":"303","messageId":"304","endLine":44,"endColumn":26},{"ruleId":"305","severity":1,"message":"313","line":52,"column":8,"nodeType":"307","endLine":52,"endColumn":27,"suggestions":"322"},{"ruleId":"301","severity":1,"message":"323","line":86,"column":11,"nodeType":"303","messageId":"304","endLine":86,"endColumn":19},{"ruleId":"301","severity":1,"message":"324","line":3,"column":10,"nodeType":"303","messageId":"304","endLine":3,"endColumn":14},{"ruleId":"301","severity":1,"message":"325","line":3,"column":16,"nodeType":"303","messageId":"304","endLine":3,"endColumn":25},{"ruleId":"301","severity":1,"message":"326","line":5,"column":8,"nodeType":"303","messageId":"304","endLine":5,"endColumn":14},{"ruleId":"301","severity":1,"message":"327","line":7,"column":10,"nodeType":"303","messageId":"304","endLine":7,"endColumn":19},{"ruleId":"301","severity":1,"message":"328","line":11,"column":7,"nodeType":"303","messageId":"304","endLine":11,"endColumn":19},{"ruleId":"301","severity":1,"message":"329","line":1,"column":10,"nodeType":"303","messageId":"304","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"330","line":6,"column":18,"nodeType":"303","messageId":"304","endLine":6,"endColumn":34},{"ruleId":"301","severity":1,"message":"310","line":10,"column":24,"nodeType":"303","messageId":"304","endLine":10,"endColumn":32},{"ruleId":"301","severity":1,"message":"331","line":14,"column":9,"nodeType":"303","messageId":"304","endLine":14,"endColumn":14},{"ruleId":"305","severity":1,"message":"332","line":36,"column":8,"nodeType":"307","endLine":36,"endColumn":24,"suggestions":"333"},{"ruleId":"317","severity":1,"message":"334","line":101,"column":56,"nodeType":"319","messageId":"320","endLine":101,"endColumn":58},{"ruleId":"301","severity":1,"message":"335","line":261,"column":7,"nodeType":"303","messageId":"304","endLine":261,"endColumn":23},{"ruleId":"336","severity":1,"message":"337","line":324,"column":106,"nodeType":"338","endLine":324,"endColumn":177},{"ruleId":"301","severity":1,"message":"339","line":3,"column":24,"nodeType":"303","messageId":"304","endLine":3,"endColumn":35},{"ruleId":"301","severity":1,"message":"340","line":3,"column":37,"nodeType":"303","messageId":"304","endLine":3,"endColumn":41},{"ruleId":"301","severity":1,"message":"341","line":7,"column":10,"nodeType":"303","messageId":"304","endLine":7,"endColumn":14},{"ruleId":"301","severity":1,"message":"342","line":7,"column":16,"nodeType":"303","messageId":"304","endLine":7,"endColumn":21},{"ruleId":"301","severity":1,"message":"327","line":8,"column":10,"nodeType":"303","messageId":"304","endLine":8,"endColumn":19},{"ruleId":"301","severity":1,"message":"343","line":10,"column":10,"nodeType":"303","messageId":"304","endLine":10,"endColumn":22},{"ruleId":"301","severity":1,"message":"344","line":11,"column":10,"nodeType":"303","messageId":"304","endLine":11,"endColumn":21},{"ruleId":"301","severity":1,"message":"345","line":14,"column":7,"nodeType":"303","messageId":"304","endLine":14,"endColumn":11},{"ruleId":"305","severity":1,"message":"332","line":36,"column":8,"nodeType":"307","endLine":36,"endColumn":24,"suggestions":"346"},{"ruleId":"317","severity":1,"message":"318","line":184,"column":55,"nodeType":"319","messageId":"320","endLine":184,"endColumn":57},{"ruleId":"301","severity":1,"message":"327","line":5,"column":10,"nodeType":"303","messageId":"304","endLine":5,"endColumn":19},{"ruleId":"301","severity":1,"message":"347","line":6,"column":10,"nodeType":"303","messageId":"304","endLine":6,"endColumn":18},{"ruleId":"301","severity":1,"message":"348","line":6,"column":20,"nodeType":"303","messageId":"304","endLine":6,"endColumn":25},{"ruleId":"305","severity":1,"message":"349","line":21,"column":8,"nodeType":"307","endLine":21,"endColumn":22,"suggestions":"350"},{"ruleId":"301","severity":1,"message":"351","line":1,"column":10,"nodeType":"303","messageId":"304","endLine":1,"endColumn":16},{"ruleId":"301","severity":1,"message":"352","line":3,"column":28,"nodeType":"303","messageId":"304","endLine":3,"endColumn":36},{"ruleId":"301","severity":1,"message":"353","line":3,"column":38,"nodeType":"303","messageId":"304","endLine":3,"endColumn":47},{"ruleId":"301","severity":1,"message":"354","line":4,"column":8,"nodeType":"303","messageId":"304","endLine":4,"endColumn":20},{"ruleId":"301","severity":1,"message":"355","line":5,"column":25,"nodeType":"303","messageId":"304","endLine":5,"endColumn":33},{"ruleId":"301","severity":1,"message":"356","line":5,"column":35,"nodeType":"303","messageId":"304","endLine":5,"endColumn":44},{"ruleId":"301","severity":1,"message":"357","line":5,"column":46,"nodeType":"303","messageId":"304","endLine":5,"endColumn":57},{"ruleId":"301","severity":1,"message":"358","line":4,"column":73,"nodeType":"303","messageId":"304","endLine":4,"endColumn":80},{"ruleId":"301","severity":1,"message":"359","line":5,"column":10,"nodeType":"303","messageId":"304","endLine":5,"endColumn":18},{"ruleId":"301","severity":1,"message":"360","line":7,"column":8,"nodeType":"303","messageId":"304","endLine":7,"endColumn":23},{"ruleId":"301","severity":1,"message":"361","line":20,"column":6,"nodeType":"303","messageId":"304","endLine":20,"endColumn":27},{"ruleId":"301","severity":1,"message":"352","line":2,"column":28,"nodeType":"303","messageId":"304","endLine":2,"endColumn":36},{"ruleId":"301","severity":1,"message":"353","line":2,"column":38,"nodeType":"303","messageId":"304","endLine":2,"endColumn":47},{"ruleId":"301","severity":1,"message":"356","line":3,"column":20,"nodeType":"303","messageId":"304","endLine":3,"endColumn":29},{"ruleId":"301","severity":1,"message":"362","line":16,"column":22,"nodeType":"303","messageId":"304","endLine":16,"endColumn":33},{"ruleId":"301","severity":1,"message":"363","line":15,"column":5,"nodeType":"303","messageId":"304","endLine":15,"endColumn":11},{"ruleId":"305","severity":1,"message":"364","line":162,"column":8,"nodeType":"307","endLine":162,"endColumn":21,"suggestions":"365"},{"ruleId":"366","severity":1,"message":"367","line":104,"column":13,"nodeType":"368","messageId":"369","endLine":104,"endColumn":74},{"ruleId":"301","severity":1,"message":"370","line":134,"column":20,"nodeType":"303","messageId":"304","endLine":134,"endColumn":29},{"ruleId":"301","severity":1,"message":"371","line":185,"column":11,"nodeType":"303","messageId":"304","endLine":185,"endColumn":25},{"ruleId":"336","severity":1,"message":"337","line":199,"column":106,"nodeType":"338","endLine":199,"endColumn":183},{"ruleId":"301","severity":1,"message":"372","line":21,"column":11,"nodeType":"303","messageId":"304","endLine":21,"endColumn":25},{"ruleId":"305","severity":1,"message":"373","line":32,"column":8,"nodeType":"307","endLine":32,"endColumn":28,"suggestions":"374"},{"ruleId":"301","severity":1,"message":"375","line":2,"column":10,"nodeType":"303","messageId":"304","endLine":2,"endColumn":14},{"ruleId":"301","severity":1,"message":"355","line":6,"column":10,"nodeType":"303","messageId":"304","endLine":6,"endColumn":18},{"ruleId":"301","severity":1,"message":"356","line":6,"column":20,"nodeType":"303","messageId":"304","endLine":6,"endColumn":29},{"ruleId":"301","severity":1,"message":"357","line":6,"column":31,"nodeType":"303","messageId":"304","endLine":6,"endColumn":42},{"ruleId":"301","severity":1,"message":"376","line":6,"column":44,"nodeType":"303","messageId":"304","endLine":6,"endColumn":57},{"ruleId":"301","severity":1,"message":"377","line":40,"column":12,"nodeType":"303","messageId":"304","endLine":40,"endColumn":20},{"ruleId":"301","severity":1,"message":"378","line":40,"column":22,"nodeType":"303","messageId":"304","endLine":40,"endColumn":33},{"ruleId":"301","severity":1,"message":"359","line":2,"column":10,"nodeType":"303","messageId":"304","endLine":2,"endColumn":18},{"ruleId":"301","severity":1,"message":"379","line":6,"column":8,"nodeType":"303","messageId":"304","endLine":6,"endColumn":18},"no-native-reassign",["380"],"no-negated-in-lhs",["381"],"@typescript-eslint/no-unused-vars","'setLocation' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["382"],"'act' is defined but never used.","'TaskType' is defined but never used.","'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["383"],["384"],"'FormPropsType' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'isModalVisible' is assigned a value but never used.",["385"],"'handleOk' is assigned a value but never used.","'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'formatCountdown' is defined but never used.","'useFormikContext' is defined but never used.","'Panel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initialValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["386"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","'getTaskTreeItems' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SwipeAction' is defined but never used.","'Icon' is defined but never used.","'Spin' is defined but never used.","'Empty' is defined but never used.","'TaskListType' is defined but never used.","'useDispatch' is defined but never used.","'Item' is assigned a value but never used.",["387"],"'Redirect' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.appLocation'. Either include them or remove the dependency array.",["388"],"'Button' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'ButtonVsIcon' is defined but never used.","'AntInput' is defined but never used.","'AntSelect' is defined but never used.","'AntTextArea' is defined but never used.","'actions' is defined but never used.","'isMobile' is defined but never used.","'TasksTreeMobile' is defined but never used.","'OwnTasksTreePropsType' is defined but never used.","'setInitData' is assigned a value but never used.","'Switch' is defined but never used.","React Hook useEffect has missing dependencies: 'props.label' and 'props.type'. Either include them or remove the dependency array.",["389"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setIsLast' is assigned a value but never used.","'onStatusChange' is assigned a value but never used.","'fortest' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["390"],"'Card' is defined but never used.","'AntTimePicker' is defined but never used.","'settings' is assigned a value but never used.","'setSettings' is assigned a value but never used.","'MenuMobile' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"399","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"408","text":"409"},"Update the dependencies array to be: [props, props.taskList]",{"range":"410","text":"411"},"Update the dependencies array to be: [props, props.dateInterval]",{"range":"412","text":"413"},"Update the dependencies array to be: [props, props.getTaskList]",{"range":"414","text":"415"},"Update the dependencies array to be: [initialValues, props, props.taskList]",{"range":"416","text":"417"},{"range":"418","text":"417"},"Update the dependencies array to be: [history, props.appLocation, props.isAuth]",{"range":"419","text":"420"},"Update the dependencies array to be: [props.label, props.type, props.value]",{"range":"421","text":"422"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"423","text":"424"},[1674,1693],"[location, props, props.initialized]",[1391,1407],"[props, props.taskList]",[1569,1589],"[props, props.dateInterval]",[1557,1576],"[props, props.getTaskList]",[1261,1277],"[initialValues, props, props.taskList]",[1273,1289],[656,670],"[history, props.appLocation, props.isAuth]",[5884,5897],"[props.label, props.type, props.value]",[1488,1508],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]"]